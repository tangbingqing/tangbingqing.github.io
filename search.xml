<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多元-总结</title>
      <link href="/2022/05/01/duo-yuan-zong-jie/"/>
      <url>/2022/05/01/duo-yuan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-变量之间的关系">一、变量之间的关系</span></h2><h4><span id="1-两个或多个离散型变量之间的相关关系">1、两个或多个离散型变量之间的相关关系</span></h4><p><strong>对应分析</strong>：行变量类间与列变量类间的联系</p><h4><span id="2-一组变量与单个变量之间的相关关系">2、一组变量与单个变量之间的相关关系</span></h4><p><strong>回归任务</strong>： <em>p</em>个输入变量𝑋1, 𝑋2,…, 𝑋𝑝 与单个输出<strong>连续型变量Y</strong>之间的关系，</p><p>Y**=** 𝛽0 + 𝛽1𝑋1 + 𝛽2𝑋2 +…+ 𝛽𝑝 𝑋𝑝</p><p>比如最小二乘、岭回归、Lasso</p><p><strong>分类任务</strong>： <em>p</em>个输入变量𝑋1, 𝑋2,…, 𝑋𝑝 与单个输出<strong>离散型变量Y</strong>之间的关系</p><p>Y=sign( 𝛼0 + 𝛼1𝑋1 + 𝛼2𝑋2 +…+ 𝛼𝑝 𝑋𝑝 − 阈值) </p><p>比如Fisher线性判别分析、Logistic回归</p><h4><span id="3-一组变量之间的相关关系">3、一组变量之间的相关关系</span></h4><p><strong>主成分分析</strong>： 变量𝑋1, 𝑋2,…, 𝑋𝑝 转化为若干个少数变量𝑍1, 𝑍2,…, 𝑍𝑚(𝑚 &lt; 𝑝) </p><p><strong>因子分析</strong>：提取变量𝑋1, 𝑋2,…, 𝑋𝑝中的共有潜在内容</p><h4><span id="4-一组变量与另一组变量之间的关系">4、一组变量与另一组变量之间的关系</span></h4><p><strong>典型相关分析</strong>：在每组变量中找出变量的线性组合 , 两组变量之间的关系</p><p><em>u</em>1 =a1x1 + a2x2 </p><p><em>v</em>1 = b1y1 + b2y2 + b3y3</p><h2><span id="二-各方法的基本思想-用途-使用条件-优缺点">二、各方法的基本思想、用途、使用条件、优缺点</span></h2><table><thead><tr><th>方法</th><th>用途</th><th></th><th>基本思想</th><th>使用条件</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>回归分析</strong></td><td>利用已知<strong>连续性输出变量</strong>的数据建模对预测未来数据输出值</td><td><strong>最小二乘</strong></td><td></td><td>样本矩阵X是列满秩，列之间线性相关较小</td><td></td><td>样本矩阵X不是列满秩或者列之间的线性相关性比较大时，计算误差大，缺乏稳定性和可靠性</td></tr><tr><td></td><td></td><td><strong>Lasso</strong></td><td>构造一个惩罚函数得到一个较为精炼的模型，使得它压缩一些回归系数</td><td></td><td>有效避免过拟合</td><td></td></tr><tr><td></td><td></td><td><strong>岭回归</strong></td><td>l2正则化，通过放弃最小二乘法的无偏性</td><td>专用于共线性数据分析</td><td>更符合实际、更可靠，对<strong>病态数据</strong>的拟合强于最小二乘法</td><td>损失部分信息、降低精度</td></tr><tr><td><strong>分类</strong></td><td>利用已知<strong>离散型输出变量</strong>的数据建模对预测未来数据输出值</td><td><strong>Fisher线性判别法</strong></td><td>利用投影使多维问题简化为一维问题来处理。使每一类内的投影值所形成的类内离差尽可能小，而不同类间的投影值所形成的类间离差尽可大</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td><strong>Logistic回归</strong></td><td>用概率估计某件事发生的可能性</td><td></td><td>1、适合二分类问题，不需要缩放输入特征 2、直接对分类可能性进行建模，避免了假设分布不准确所带来的问题</td><td></td></tr><tr><td><strong>聚类</strong></td><td>对无类别的数据进行建模，依据数据之间特征的相似性进行<strong>分组</strong></td><td><strong>层次聚类</strong></td><td>开始将<em>n</em>个样本各自作为一类，并规定样本之间的距离和类与类之间的距离，然后将距离最近的两类合并成一个新类，计算新类与其他类的距离；重复进行两个最近类的合并，每次减少一类，直至所有的样本合并为一类。</td><td>数据非均匀分布</td><td>1、相似度容易定义，限制少  2、不需要预先指定聚类数  3、可以发现类的层次关系  4、可以聚类成其它形状</td><td>1、计算复杂度太高   2、受奇异值影响较大  3、算法很可能聚类成链状</td></tr><tr><td></td><td></td><td><strong>动态聚类</strong></td><td>选择一批凝聚点或给出一个初始的分类，让样本按某种原则向凝聚点凝聚，对凝聚点进行不断的修改或迭代，直至分类比较合理或迭代稳定为止。类的个数<em>k</em>可以事先指定，也可以在聚类过程中确定。</td><td></td><td></td><td></td></tr><tr><td><strong>对应分析</strong></td><td>成对<strong>离散型变量</strong>的各水平相互关系，描述二维和多维列联表数据</td><td></td><td>对应分析将变量及变量之间的联系同时反映在一张二维或三维的散点图上，并使联系密切的水平点较集中，联系疏远的水平点较分散</td><td></td><td>1、揭示行变量类间与列变量类间的联系  2、将类别的联系直观地表现在图形中</td><td>1、不能用于相关关系的假设检验  2、维数有研究者自定 3、受极端值的影响</td></tr><tr><td><strong>主成分分析</strong></td><td>少数综合变量代替原始变量的大部分信息重新表示数据</td><td></td><td>在数据各变量相关的情况下，将原始变量做线性加权形成若少数几个线性无关的综合变量，并反映出原变量的大部分信息</td><td>变量需要有较强的相关性</td><td></td><td>1、却无法通过参数化等方法对处理过程进行干预，可能会得不到预期的效果   2、特征值分解变换的矩阵必须是方阵 3、在非高斯分布情况下，PCA方法得出的主成分可能并不是最优的</td></tr><tr><td><strong>因子分析</strong></td><td>找到影响因变量的不可观测的独立变量</td><td></td><td>从变量群中提取<strong>共性因子</strong>的统计技术，即将相同本质的变量归入一个因子，可减少变量的数目，还可检验变量间关系的假设。</td><td></td><td></td><td>确定应该提取的因子数量的方法或者过于主观，因为主观性而有所偏差</td></tr><tr><td><strong>典型相关分析</strong></td><td>识别和测量<strong>两组</strong>变量之间的关系</td><td></td><td>1、在每组变量中找出变量的线性组合，使得两组的线性组合之间具有最大的相关系  2、重复到两组变量之间的相关性被提取完毕</td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th>区别</th><th>共同缺点</th></tr></thead><tbody><tr><td>主成分分析</td><td>少数主成分代表原数据部分信息</td><td>选择哪些变量参与建模，太过主观</td></tr><tr><td>因子分析</td><td>少数因子代表全部数据的信息，有一个随机模型，把原始的p个变量转换成少数不相关的m个因子</td><td></td></tr></tbody></table><table><thead><tr><th></th><th>区别</th><th></th></tr></thead><tbody><tr><td>分类</td><td>带有一定的目的，不同目的分类结果也会不同，受到各个变量的影响各不相同</td><td></td></tr><tr><td>聚类</td><td>所有变量都被同等使用</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2><span id="三-其他概念">三、其他概念</span></h2><p>1、</p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元统计 - 典型相关分析</title>
      <link href="/2022/05/01/duo-yuan-dian-xing-xiang-guan-fen-xi/"/>
      <url>/2022/05/01/duo-yuan-dian-xing-xiang-guan-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3><span id="典型相关分析">典型相关分析</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>CCA <span class="token punctuation">(</span> n_components <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token punctuation">,</span> scale <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token punctuation">)</span><span class="token comment"># n_components : 要保留的组件数</span><span class="token comment"># scale : 是否对变量进行归一化处理</span>属性：<span class="token comment"># transform : 应用降维</span><span class="token comment"># x_weights_, y_weights_ : 典型变量的权重</span><span class="token comment"># x_loadings_, y_loadings_ : 典型变量的载荷</span><span class="token comment"># x_scores_, y_scores_ : 典型变量的得分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="一-数据集简介">一、数据集简介</span></h3><blockquote><p>教师数据 (aaup.csv) 该数据来自美国大学教授协会 (AAUP) 年度普查, 包括分别按照正教授和副教授的平均工资和补贴 (1994 年) 统计的数据。一共有13 个数量变量: ASF (正教授平均工资)、 ASA1 (副教授平均工资)、 ASA2 (助理教授平均工资)、 ASALL (所有级别平均工资)、 ACF (正教授平均补贴)、ACA1 (副教授平均补贴)、 ACA2 (助理教授平均补贴)、 ACALL (所有级别平均补贴)、 NF (正教授人数)、NA1 (副教授人数)、 NA2 (助理教授人数)、 NIN (助教人数)、 NALL (所有级别教授数目).该数据涉及 1161 个学校。</p><p>现需要分析一组变量各类人员薪资（以字母 A 为开头的 8 个变量），与另一组变量教师人数（以字母 N 开头的 5 个变量）之间存在的潜在关系。</p></blockquote><h3><span id="二-实验">二、实验</span></h3><p>1、计算所有变量间相关系数矩阵(11×11 的矩阵)M_corr：利用以下代码实现numpy.corrcoef(x, y=None, rowvar=True) ，观察一下两组变量中哪些变量可能存在相关性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"aaup.csv"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>M_corr <span class="token operator">=</span> np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> rowvar<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/05/01/duo-yuan-dian-xing-xiang-guan-fen-xi/image-20220501154750542.png" alt="image-20220501154750542"></p><p>2、利用典型相关分析计算两组变量之间的典型相关系数，并绘制二维折线图（崖底碎石土），其中横坐标为典型相关系数的个数，纵坐标为对应的第 <em>i</em> 个典型相关系数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cross_decomposition <span class="token keyword">import</span> CCA<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScalerdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"aaup.csv"</span><span class="token punctuation">)</span>scal <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> scal<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cca <span class="token operator">=</span> CCA<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  cca<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>X_c<span class="token punctuation">,</span> Y_c <span class="token operator">=</span> cca<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    M_corr <span class="token operator">=</span> np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>X_c<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> Y_c<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> rowvar<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token builtin">sum</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>M_corr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">sum</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 刻度</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"个数"</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"相关系数"</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/05/01/duo-yuan-dian-xing-xiang-guan-fen-xi/image-20220501162310209.png" alt="image-20220501162310209"></p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元-因子分析</title>
      <link href="/2022/05/01/duo-yuan-yin-zi-fen-xi/"/>
      <url>/2022/05/01/duo-yuan-yin-zi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3><span id="因子分析">因子分析</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">factor_analyzer<span class="token punctuation">.</span>FactorAnalyzer<span class="token punctuation">(</span>n_factors<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token string">'promax'</span> <span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'minres'</span> <span class="token punctuation">)</span><span class="token comment"># n_factors : 要选择的因素的数量。默认为 3</span><span class="token comment"># rotation : 旋转</span>varimax（正交旋转）promax（倾斜旋转）oblimin（倾斜旋转）oblimax（正交旋转）quartimin（斜向旋转）quartimax（正交旋转）equamax（正交旋转）<span class="token comment"># method ：要使用的拟合方法</span>minres（主因子法） <span class="token punctuation">,</span> ml（主因子法） <span class="token punctuation">,</span> principal（主成分法）属性：loadings ： 因子载荷矩阵get_communalities ： 因子共同度，所有因子对各变量的贡献率（Xi对公因子F的依赖程度）get_factor_variance ：每个因子的方差、比例方差和累积方差get_factor_variance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> ： 各因子累计贡献率get_eigenvalues<span class="token punctuation">(</span><span class="token punctuation">)</span> ：因子特征值，原始特征值和公因子特征值transform<span class="token punctuation">(</span><span class="token punctuation">)</span> ： 因子得分，每条数据的公因子表示形式rotation_matrix ： 旋转矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="实验">实验：</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> factor_analyzer <span class="token keyword">import</span> FactorAnalyzer<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token comment"># 下载数据</span>datasets<span class="token punctuation">.</span>clear_data_home<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>datafa <span class="token operator">=</span> FactorAnalyzer<span class="token punctuation">(</span>n_factors<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'minres'</span><span class="token punctuation">)</span>fa<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"各因子的累计贡献率为"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fa<span class="token punctuation">.</span>get_factor_variance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"所有因子多各变量的贡献率为"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fa<span class="token punctuation">.</span>get_communalities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方差贡献率</span>ev<span class="token punctuation">,</span> v <span class="token operator">=</span> fa<span class="token punctuation">.</span>get_eigenvalues<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 原始特征值和公因子特征值</span>ratio<span class="token operator">=</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span>  <span class="token comment"># 方差贡献率=该因子的特征值/所有因子特征值之和</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ratio<span class="token punctuation">)</span>  <span class="token comment"># 绘点</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ratio<span class="token punctuation">)</span>   <span class="token comment"># 绘曲线</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Scree Plot'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Factors'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Eigenvalue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># a</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 相关系数</span>df_cm <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>fa<span class="token punctuation">.</span>loadings_<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>df_cm<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"BuPu"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_tick_params<span class="token punctuation">(</span>labelsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Factor Analysis'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token string">'xx-large'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Sepal Width'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token string">'xx-large'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'factorAnalysis.png'</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token comment"># 颜色越深，相关程度越大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/05/01/duo-yuan-yin-zi-fen-xi/image-20220501102944518.png" alt="image-20220501102944518"></p><p><img src="/2022/05/01/duo-yuan-yin-zi-fen-xi/image-20220501102928221.png" alt="image-20220501102928221"></p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元统计 - 主成分分析</title>
      <link href="/2022/04/30/duo-yuan-zhu-cheng-fen-fen-xi/"/>
      <url>/2022/04/30/duo-yuan-zhu-cheng-fen-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3><span id="主成分分析">主成分分析</span></h3><p>在变量相关时寻找不相关的线性组合，这些组合成为成分</p><h3><span id="缺失值补全">缺失值补全</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">imr <span class="token operator">=</span> SimpleImputer<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> missing_values<span class="token operator">=</span>nan<span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>data <span class="token operator">=</span> imr<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 缺失值占位符</span>missing_values ： <span class="token builtin">int</span>、<span class="token builtin">float</span>、<span class="token builtin">str</span>、np<span class="token punctuation">.</span>nan 或 <span class="token boolean">None</span>，默认值<span class="token operator">=</span>np<span class="token punctuation">.</span>nan<span class="token comment"># 补全的方法 </span>strategy ： “mean”（平均值）、 “median”（中位数）、“most_frequent”（使用每列中最频繁的值替换缺失）、“constant”（恒定值 fill_value）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="主成分分析">主成分分析</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>decompositio<span class="token punctuation">.</span>PCA <span class="token punctuation">(</span> n_components <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token punctuation">,</span> copy <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token punctuation">,</span> whiten <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token punctuation">,</span> svd_solver <span class="token operator">=</span> <span class="token string">'auto'</span> <span class="token punctuation">,</span> tol <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token punctuation">,</span> iterated_power <span class="token operator">=</span> <span class="token string">'auto'</span> <span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">)</span><span class="token comment"># 剩余组数 ： n_components</span>若 <span class="token number">0</span> <span class="token operator">&lt;</span> n_components <span class="token operator">&lt;</span> <span class="token number">1</span>，则方差和需要大于 n_components 所指定的阈值，PCA 会自动地选择下降维数；（svd_solver <span class="token operator">==</span> <span class="token string">'full'</span>）如果 n_components 取整数，则事先指定主成分个数。<span class="token comment"># 是否需要将原始训练数据复制 copy :</span>如果为 <span class="token boolean">False</span>，传递给 fit 的数据将被覆盖并且运行 fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span> 不会产生预期的结果，要用 fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment"># svd_solver == “auto”</span>求解器由基于X<span class="token punctuation">.</span>shape和n_components 的默认策略选择属性：pca<span class="token punctuation">.</span>components_ <span class="token punctuation">:</span> 各主成分的权向量，pca<span class="token punctuation">.</span>n_components_ <span class="token punctuation">:</span> 选出的主成分量 ，当 n_components 设置为 <span class="token string">'mle'</span> 或 <span class="token number">0</span> 到 <span class="token number">1</span> 之间的数字（使用 svd_solver <span class="token operator">==</span> <span class="token string">'full'</span>）时，此数字是根据输入数据估计的pca<span class="token punctuation">.</span>get_precision <span class="token punctuation">:</span> 精度pca<span class="token punctuation">.</span>explained_variance_ratio_ <span class="token punctuation">:</span> 方差百分比，贡献率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="一-数据集简介">一、数据集简介</span></h3><blockquote><p>半导体数据（secom.data），拥有 590 个特征。</p></blockquote><blockquote><p>教师数据 (aaup.csv) 该数据来自美国大学教授协会 (AAUP) 年度普查, 包括分别按照正教授和副教授的平均工资和补贴 (1994 年) 统计的数据。一共有 13 个数量变量: ASF (正教授平均工资)、 ASA1 (副教授平均工资)、 ASA2 (助理教授平均工资)、 ASALL (所有级别平均工资)、 ACF (正教授平均补贴)、 ACA1 (副教授平均补贴)、 ACA2 (助理教授平均补贴)、 ACALL (所有级别平均补贴)、 NF (正教授人数)、NA1 (副教授人数)、 NA2 (助理教授人数)、 NIN (助教人数)、 NALL (所有级别教授数目).该数据涉及 1161 个学校. </p></blockquote><p>(数据下载：<a href="https://github.com/tangbingqing/multivariate-statistics-data">https://github.com/tangbingqing/multivariate-statistics-data</a>) </p><h3><span id="二-实验">二、实验</span></h3><p>1、(1)数据预处理，本数据集存在缺失数据，将每列的缺失值补全为该列的所有非缺失值的均值。</p><p>(2)画出崖底碎石图，观察此图看是否个主成分的贡献率的差异情况；</p><p>(3)选择不同的阈值 0.7，0.8，0.9，筛选出不同个数的主成分；</p><p>(4)计算在不同阈值条件下属性的压缩比，即主成分个数/所有原始数据的属性个数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>impute <span class="token keyword">import</span> SimpleImputer<span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">as</span> dpdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">".\secom.data"</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">)</span><span class="token comment"># 缺失值处理</span>imr <span class="token operator">=</span> SimpleImputer<span class="token punctuation">(</span>missing_values<span class="token operator">=</span>np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span> data <span class="token operator">=</span> imr<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>pca <span class="token operator">=</span> dp<span class="token punctuation">.</span>PCA<span class="token punctuation">(</span>n_components <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span> svd_solver<span class="token operator">=</span><span class="token string">'full'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>pca<span class="token punctuation">.</span>n_components<span class="token keyword">print</span><span class="token punctuation">(</span>pca<span class="token punctuation">.</span>n_components_<span class="token punctuation">)</span><span class="token comment"># 崖底碎石图</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>fig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>pca<span class="token punctuation">.</span>explained_variance_ratio_<span class="token punctuation">)</span> <span class="token comment"># 单个贡献率</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>pca<span class="token punctuation">.</span>explained_variance_ratio_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 累计贡献率</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"单个贡献率"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"累计贡献率"</span><span class="token punctuation">)</span><span class="token comment"># 筛选不同个数的主成分,压缩比</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.70</span><span class="token punctuation">,</span><span class="token number">0.80</span><span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">]</span>coms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>yasuobi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>    pca <span class="token operator">=</span> dp<span class="token punctuation">.</span>PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span>i<span class="token punctuation">)</span>    reduced <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    coms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pca<span class="token punctuation">.</span>n_components_<span class="token punctuation">)</span>   <span class="token comment"># 不同个数的主成分</span>    yasuobi<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>pca<span class="token punctuation">.</span>explained_variance_ratio_<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pca<span class="token punctuation">.</span>n_components_<span class="token operator">/</span><span class="token number">590</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 信息量占比</span><span class="token keyword">print</span><span class="token punctuation">(</span>coms<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>yasuobi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/30/duo-yuan-zhu-cheng-fen-fen-xi/image-20220430203945375.png" alt="image-20220430203945375"></p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元统计 - 聚类</title>
      <link href="/2022/04/30/duo-yuan-ju-lei/"/>
      <url>/2022/04/30/duo-yuan-ju-lei/</url>
      
        <content type="html"><![CDATA[<h3><span id="层次聚类">层次聚类</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>hierarchy <span class="token keyword">import</span> linkage<span class="token punctuation">,</span>dendorgram<span class="token punctuation">,</span>fcluster<span class="token comment"># 执行分层/凝聚聚类</span>scipy<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>hierarchy<span class="token punctuation">.</span>linkage<span class="token punctuation">(</span>y<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'single'</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">'euclidean'</span><span class="token punctuation">,</span> optimal_ordering<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">### method : 计算形成的类之间距离</span>    single（最近点算法）、complete（最远点算法）、average（平均）、weighted（加权）、centroid（重心）、median（中位数）、ward（方差最小化算法）<span class="token comment">### metric ：计算距离的方法</span>    ’euclidean’（欧几里得），’l1’，’l2’，’mantattan’（曼哈顿），’cosine’（余弦），’precomputed’（预先计算）<span class="token comment"># ps : 如果linkage=’ward’，则metric必须为’euclidean’</span><span class="token comment"># 从给定的链接矩阵定义的层次聚类中形成平面聚类，构造集群</span>fcluster<span class="token punctuation">(</span>Z<span class="token punctuation">,</span> t<span class="token punctuation">,</span> criterion<span class="token operator">=</span><span class="token string">'inconsistent'</span><span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> R<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> monocrit<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">### Z ： ndarray ，linkage用函数返回的矩阵编码的层次聚类</span><span class="token comment">### t ： 形成扁平集群时应用的阈值</span><span class="token comment"># 层次聚类绘制为树状图</span>dendrogram <span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="一-数据集简介">一、数据集简介</span></h3><blockquote><p>世界银行样本数据集：WBClust2013.csv</p><p>亚马逊雨林（1999～2010 年）的数据集：NASAUnderstory.csv</p></blockquote><p>(数据下载：<a href="https://github.com/tangbingqing/multivariate-statistics-data">https://github.com/tangbingqing/multivariate-statistics-data</a>) </p><h3><span id="二-实验">二、实验</span></h3><p>1、选择不同的样本间举例或类间距离并观察聚类后的谱系图的变化情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>hierarchy <span class="token keyword">import</span> dendrogram<span class="token punctuation">,</span>linkage<span class="token punctuation">,</span>fcluster<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScalerdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"WBClust2013.csv"</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 标准归一化</span>scal <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> scal<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 聚类结果</span>metric <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cityblock'</span><span class="token punctuation">,</span><span class="token string">'euclidean'</span><span class="token punctuation">,</span><span class="token string">'chebyshev'</span><span class="token punctuation">,</span><span class="token string">'canberra'</span><span class="token punctuation">,</span><span class="token string">'hamming'</span><span class="token punctuation">,</span><span class="token string">'minkowski'</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"曼哈顿"</span><span class="token punctuation">,</span><span class="token string">"欧几里得"</span><span class="token punctuation">,</span><span class="token string">"切比雪夫"</span><span class="token punctuation">,</span><span class="token string">"堪培拉"</span><span class="token punctuation">,</span><span class="token string">"汉明距离"</span><span class="token punctuation">,</span><span class="token string">"闵氏"</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Z <span class="token operator">=</span> linkage<span class="token punctuation">(</span>data<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'single'</span><span class="token punctuation">,</span> metric <span class="token operator">=</span> metric<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dn <span class="token operator">=</span> dendrogram<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>  <span class="token comment"># 制作谱系图</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中一个例子：</p><p><img src="/2022/04/30/duo-yuan-ju-lei/image-20220430163740478.png" alt="image-20220430163740478"></p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元统计 - 分类</title>
      <link href="/2022/04/29/duo-yuan-fen-lei/"/>
      <url>/2022/04/29/duo-yuan-fen-lei/</url>
      
        <content type="html"><![CDATA[<h3><span id="分类">分类</span></h3><table><thead><tr><th></th><th>目的</th><th>条件</th><th align="left"></th></tr></thead><tbody><tr><td>线性判别分析（LDA）</td><td>找到原始变量的线性组合</td><td>所有组协方差矩阵都相等</td><td align="left">要求数据必须是连续变量且服从正态分布</td></tr><tr><td>二次判别分析（QDA）</td><td></td><td></td><td align="left">要求数据必须是连续变量且服从正态分布</td></tr><tr><td>Fisher判别分析</td><td>对原数据进行降维投影，寻求能将各个类分开的方向</td><td></td><td align="left">要求K个总体协方差矩阵满秩且相同</td></tr><tr><td>Logistic回归</td><td>分类（yes or no）</td><td>适用于因变量为指数</td><td align="left"></td></tr></tbody></table><p>经检验表明，二次判别一般要优于线性判别，更优于Fisher判别</p><h3><span id="一-数据集简介">一、数据集简介</span></h3><blockquote><p>pendigits数据集里是已经处理过的图像特征，每组数据共有17个，其中前16个是处理过的数字的特征，第17个是数据标签（0～9），也即为对应的数字。</p></blockquote><p>(数据下载：<a href="https://github.com/tangbingqing/multivariate-statistics-data">https://github.com/tangbingqing/multivariate-statistics-data</a>) </p><h3><span id="二-实验">二、实验</span></h3><p>1、读取数据集合 pendigits.csv ，并将其随机按照 1:5 的比例划分为训练集和测试集，估计模型的分类准确率。</p><p>（数据并不稀疏）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> discriminant_analysis <span class="token keyword">as</span> da<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"pendigits.csv"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>train_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>model <span class="token operator">=</span> da<span class="token punctuation">.</span>LinearDiscriminantAnalysis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 都为默认值</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span> <span class="token operator">%</span> model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span> <span class="token operator">%</span> model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、利用十折交叉验证和 Fisher 线性判别准则对数据集 LDA-sparse_data 进行建模，并观察指定模型中相关输入参数 shrinkage 的取值与不指定该参数取值时模型前后之间的差异。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_scoredata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"LDA-sparse_data.csv"</span><span class="token punctuation">)</span><span class="token comment">### data =  pd.read_excel(r".LDA-sparse_data.xlsx",sheet_name="Sheet1")</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">698</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">698</span><span class="token punctuation">]</span>R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>shrinkages <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> shrinkages<span class="token punctuation">:</span>    model <span class="token operator">=</span> da<span class="token punctuation">.</span>LinearDiscriminantAnalysis<span class="token punctuation">(</span>solver<span class="token operator">=</span><span class="token string">"lsqr"</span><span class="token punctuation">,</span>shrinkage<span class="token operator">=</span>i<span class="token punctuation">)</span>    kfolds <span class="token operator">=</span> KFold<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    score <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv <span class="token operator">=</span>kfolds<span class="token punctuation">)</span>    R<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 不指定参数</span>model <span class="token operator">=</span> da<span class="token punctuation">.</span>LinearDiscriminantAnalysis<span class="token punctuation">(</span><span class="token punctuation">)</span>kfolds <span class="token operator">=</span> KFold<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>score <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv <span class="token operator">=</span>kfolds<span class="token punctuation">)</span>R<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0.6245833333333334</span><span class="token punctuation">,</span> <span class="token number">0.6191666666666666</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0.625</span><span class="token punctuation">,</span> <span class="token number">0.5070833333333333</span><span class="token punctuation">,</span> <span class="token number">0.8270833333333334</span><span class="token punctuation">]</span> <span class="token comment"># 好像不指定参数，更准确一点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、</p><p>（1）读取数据集 banana.dat，并在二维坐标系中绘制该数据集的散点图，其中两类数据分别使用两种不同颜色的点表示；</p><p>（2）利用十折交叉验证和 Fisher 线性判别法对该数据集进行建模，并观察分类准确率是否较高？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snsdata <span class="token operator">=</span>  pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"banana.dat"</span><span class="token punctuation">)</span><span class="token comment"># 散点图</span>x1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'At1'</span><span class="token punctuation">]</span>x2 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">' At2'</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">' Class'</span><span class="token punctuation">]</span>sns<span class="token punctuation">.</span>scatterplot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span>hue<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token comment"># 建模</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>model <span class="token operator">=</span> da<span class="token punctuation">.</span>LinearDiscriminantAnalysis<span class="token punctuation">(</span><span class="token punctuation">)</span>kfolds <span class="token operator">=</span> KFold<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>score <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv <span class="token operator">=</span> kfolds<span class="token punctuation">)</span>score <span class="token operator">=</span> score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"准确率："</span><span class="token punctuation">,</span>score<span class="token punctuation">)</span>  <span class="token comment">#准确率 (好像只有0.55)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/29/duo-yuan-fen-lei/image-20220429214113362.png" alt="image-20220429214113362"></p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元统计 - 回归</title>
      <link href="/2022/04/24/duo-yuan-hui-gui/"/>
      <url>/2022/04/24/duo-yuan-hui-gui/</url>
      
        <content type="html"><![CDATA[<h3><span id="回归">回归</span></h3><p>交叉验证 ：评价回归结果的好坏</p><p>过拟合 ：过拟合意味着模型没有普遍意义，除了用于建模的数据，不适用于其他数据</p><h3><span id="一-数据集简介">一、数据集简介</span></h3><blockquote><p>原始数据有 14 个变量的 506 个观察值，其中，medv(自住房屋房价中位数，单位:千美元)是原始的目标变量，其他变量包括:crim(城镇的人均犯罪率)、mn(占地面积超过 25000 平方英尺的住宅用地的比例)、indus(每个镇的非零售业务比例，单位:英亩)、chas(有关查尔斯河的虚拟变量，如果挨着河为1，否则为0)、mo(一氧化氮浓度，单位:Ppm)、m(平均每间住房的房间数量)、age(1940 年以前建成的自住单位的房龄比例)、dis(五个波土顿就业中心的加权距离)、rad(高速公路的可达性指数)、tax(每万美元全价物业值的财产税率)、ptratio(城镇学生与教师的比例)、b(=100078-0.63)2，其中的 B 是城镇黑人的比例)、Istat(低收入人口比例);更正过的数据集有以下附加变量:cmed(修正了的自住房价中位数，单位:千美元)、tow(镇名称)、trat(人口普查区)、lon(人口普查区的经度)、lat(人口普查区的纬度)。</p></blockquote><p>我们将用 <strong>comedy</strong>(修正了的自住房屋房价中位数)作为<strong>因变量</strong>， 而将 crim，zn，indus，nox，rm，age，dis，rad，tax，ptratio，b，lstat 这<strong>12</strong>个变量作为<strong>自变量</strong>。(数据下载：<a href="https://github.com/tangbingqing/multivariate-statistics-data">https://github.com/tangbingqing/multivariate-statistics-data</a>) </p><h3><span id="二-实验">二、实验</span></h3><p>1、随机地将当前数据集按照 <strong>3:1</strong> 的容量比例划分为训练集和测试集，重复此步骤十次，并将得到十次结果制作如下的折线图，其中横坐标为次数，纵坐标为对应次数的可决系数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold  <span class="token comment"># 交叉验证</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score  <span class="token comment"># 模型精度</span>model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>train_size<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span>    <span class="token comment"># 若使用随机种子，random_state ，那么每次生成的数据都是xiang</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    R<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>x_label <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_label<span class="token punctuation">,</span> R<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/24/duo-yuan-hui-gui/image-20220424161429912.png" alt="image-20220424161429912"></p><p>2、<strong>最优回归方程的选择</strong>：从 12 个自变量中随机的抽取 <em>n</em>（其中n=2,…..12）个自变量，并利用十折交叉验证计算所建模型的可决系数，依据以上 12 个模型的可决系数大小确定哪一个模型的预测精度较高。（<strong>并不一定使用全部自变量的模型精度最好</strong>） </p><blockquote><p>sklearn.model_selection.cross_val_score (estimator, <em>X</em> , <em>y = None</em> ,  <em>score</em> <em>=</em> <em>None</em> , <em>cv</em> <em>=</em> <em>None</em>  )</p><p>estimator:估计器</p><p>x : 要拟合的数据</p><p>y : 尝试预测的目标变量</p><p>cv : 确定交叉验证拆分策略。cv 的可能输入是：<code>None</code>, 使用默认的 5 折交叉验证 ; int，指定 a 中的折叠数<code>(Stratified)KFold</code></p></blockquote><blockquote><p>sklearn.model_selection.KFold ( <em>n_splits = 5</em> , <em>shuffle = False</em> , <em>random_state = None</em> )</p></blockquote><h4><span id="区别">区别:</span></h4><p>kfold : 只是将数据集划分为K-折，只是划分数据集</p><p>cross_val_score ： 根据模型进行计算，计算交叉验证的结果</p><p>LinearRegression().score(X, y) : score 计算这个的模型的可决系数，是模型自带的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    kfolds <span class="token operator">=</span> KFold<span class="token punctuation">(</span>i<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> train<span class="token punctuation">,</span>test <span class="token keyword">in</span> kfolds<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">)</span>        R<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span>R<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> tup<span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token comment"># kfolds = KFold(i,shuffle=False)</span>    xx <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>label<span class="token punctuation">]</span>    score <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>xx<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token comment">#R.append(score.mean())</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、岭回归、Lasso 回归模型中关键正则参数𝛌的选择：在给定参数𝛌 的 0.01，0.1，0.2, 0.5, 1 这五个可能性取值的条件下，利用十折交叉验证和可决系数确定两个模型的各自最优参数?</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lamda <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 岭回归</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Ridge<span class="token punctuation">,</span>RidgeCVkfolds <span class="token operator">=</span> KFold<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>R1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> l <span class="token keyword">in</span> lamda<span class="token punctuation">:</span>    model <span class="token operator">=</span> Ridge<span class="token punctuation">(</span>alpha<span class="token operator">=</span>l<span class="token punctuation">,</span>fit_intercept<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    score <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv<span class="token operator">=</span>kfolds<span class="token punctuation">)</span>    R1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># l = 1 时，最好</span><span class="token comment"># Lasso回归</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LassoR2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> l <span class="token keyword">in</span> lamda<span class="token punctuation">:</span>    model <span class="token operator">=</span> Lasso<span class="token punctuation">(</span>alpha<span class="token operator">=</span>l<span class="token punctuation">,</span>fit_intercept<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    score <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv<span class="token operator">=</span>kfolds<span class="token punctuation">)</span>    R2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># l = 0.2 时，最好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多元统计 - 画图</title>
      <link href="/2022/04/22/hua-tu/"/>
      <url>/2022/04/22/hua-tu/</url>
      
        <content type="html"><![CDATA[<p>数据下载：<a href="https://github.com/tangbingqing/multivariate-statistics-data">https://github.com/tangbingqing/multivariate-statistics-data</a></p><p>轮廓图和调和曲线图有着相近的功能，轮廓图简单却现得粗糙，调和曲线图公式复杂却十分精细。</p><p><strong>均可用于聚类分析：同类曲线聚在一起，不同类不同束</strong></p><h2><span id="一-轮廓图">一、轮廓图</span></h2><p>在二维直角坐标系中，将n次观测值可画出n条折线构成轮廓图，其中横坐标表示各个变量<strong>，</strong>纵坐标表示<strong>与变量取值成正比的数值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"iris.data"</span><span class="token punctuation">)</span>   <span class="token comment"># 尾鸢花数据</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>plotting<span class="token punctuation">.</span>parallel_coordinates<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'species'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/22/hua-tu/image-20220422184138691.png" alt="image-20220422184138691"></p><h2><span id="二-调和曲线图">二、调和曲线图</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandas<span class="token punctuation">.</span>plotting <span class="token keyword">import</span> andrews_curvesdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r"iris.data"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>andrews_curves<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'species'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/22/hua-tu/image-20220422184428930.png" alt="image-20220422184428930"></p><h2><span id="三-雷达图">三、雷达图</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'SimHei'</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'综合'</span><span class="token punctuation">,</span><span class="token string">'第一周'</span><span class="token punctuation">,</span><span class="token string">'第二周'</span><span class="token punctuation">,</span><span class="token string">'第三周'</span><span class="token punctuation">,</span><span class="token string">'第四周'</span><span class="token punctuation">,</span><span class="token string">'第五周'</span><span class="token punctuation">,</span><span class="token string">'第六周'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>score <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">88.7</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">)</span>nAttr <span class="token operator">=</span> <span class="token number">6</span>  <span class="token comment"># 共6组</span>angles<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span>nAttr<span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>Python<span class="token operator">=</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span><span class="token punctuation">[</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 闭合</span>angles<span class="token operator">=</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>angles<span class="token punctuation">,</span><span class="token punctuation">[</span>angles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#闭合</span>fig<span class="token operator">=</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>   <span class="token comment"># 背景颜色，白色</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span>polar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>angles<span class="token punctuation">,</span>Python<span class="token punctuation">,</span><span class="token string">'bo-'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 绿色边框</span>plt<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>angles<span class="token punctuation">,</span>Python<span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment">#绿色背景填充</span>plt<span class="token punctuation">.</span>thetagrids<span class="token punctuation">(</span>angles<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>  <span class="token comment"># 标签</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/22/hua-tu/image-20220422185927468.png" alt="image-20220422185927468"></p><h2><span id="四-散布矩阵图">四、散布矩阵图</span></h2><p>展示每两个变量之间的相关情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandas<span class="token punctuation">.</span>plotting <span class="token keyword">import</span> scatter_matrixpd_data<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"iris.data"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>scatter_matrix<span class="token punctuation">(</span>pd_data<span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/22/hua-tu/image-20220422200043112.png" alt="image-20220422200043112"></p><h2><span id="实验">实验</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># (1)分别绘制 OXY 与 time 和 age 的散布图</span><span class="token keyword">from</span> pandas<span class="token punctuation">.</span>plotting <span class="token keyword">import</span> scatter_matrixdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'peo.txt'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">)</span>da_ti_ag <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"OXY"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>scatter_matrix<span class="token punctuation">(</span>da_ti_ag<span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># (2) 1,2,21,22 的 4 个人的调和曲线图(放在同一张图上)</span><span class="token keyword">from</span> pandas<span class="token punctuation">.</span>plotting <span class="token keyword">import</span> andrews_curvesmatplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment"># 显示负号</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'peo.txt'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>da_ti_ag <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>andrews_curves<span class="token punctuation">(</span>da_ti_ag<span class="token punctuation">,</span><span class="token string">"OXY"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/22/hua-tu/image-20220422202553681.png" alt="image-20220422202553681"></p><p><img src="/2022/04/22/hua-tu/image-20220422204459795.png" alt="image-20220422204459795"></p>]]></content>
      
      
      <categories>
          
          <category> 多元统计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2022/04/16/er-cha-shu/"/>
      <url>/2022/04/16/er-cha-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E6%8B%93%E5%B1%95%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86">一、拓展二叉树的构建与遍历</a></li><li><a href="#%E4%BA%8C-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86">二、线索二叉树的构建与遍历</a></li></ul><!-- tocstop --><h1><span id="一-拓展二叉树的构建与遍历">一、拓展二叉树的构建与遍历</span></h1><p>中序遍历和后序同理</p><p><img src="/2022/04/16/er-cha-shu/D8B2D690E6F80BC6F5BE899D69C39C18.jpg" alt="img"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;template&lt;typename DataType&gt;struct Binode{    DataType data;    Binode&lt;DataType&gt; *lchild ,* rchild;};template&lt;typename DataType&gt;class Bitree{public:    Bitree(){root = Creat();} //建立一棵二叉树    void Preorder(){Preorder(root);}private:    Binode&lt;DataType&gt;* Creat();    void Preorder(Binode&lt;DataType&gt;*bt);  //前序遍历函数调用    Binode&lt;DataType&gt;* root; //指向根节点的头指针};//构造函数建立二叉树template&lt;typename DataType&gt;Binode&lt;DataType&gt; * Bitree&lt;DataType&gt;::Creat(){    Binode&lt;DataType&gt; * bt;    char ch;    cout&lt;&lt;"请输入一个元素："&lt;&lt;endl;    cin&gt;&gt;ch;    if(ch=='#') bt=nullptr; //空    else{        bt = new Binode&lt;DataType&gt;;        bt-&gt;data=ch;        bt-&gt;lchild = Creat();        bt-&gt;rchild = Creat();    }    return bt;}//前序遍历template&lt;typename DataType&gt;void Bitree&lt;DataType&gt;::Preorder(Binode&lt;DataType&gt;*bt){    if(bt==nullptr) return;    else{        cout&lt;&lt;bt-&gt;data&lt;&lt;"\t";        Preorder(bt-&gt;lchild);        Preorder(bt-&gt;rchild);    }}int main(){    Bitree&lt;char&gt;T{};    T.Preorder();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="二-线索二叉树的构建与遍历">二、线索二叉树的构建与遍历</span></h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性判别分析</title>
      <link href="/2022/04/06/xian-xing-pan-bie-fen-xi/"/>
      <url>/2022/04/06/xian-xing-pan-bie-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1><span id="基于线性判别模型的分类">基于线性判别模型的分类</span></h1><p>PCA（主成分分析）是不考虑样本类别输出的无监督降维技术。</p><p>LDA（线性判别分析）是一种监督学习的降维技术，也就是说它的数据集的每个样本是有类别输出的。</p><p>LDA的思想可以用一句话概括，就是“投影后类内方差最小，类间方差最大”。我们要将数据在低维度上进行投影，投影后希望每一种类别数据的投影点尽可能的接近，而不同类别的数据的类别中心之间的距离尽可能的大。</p><p><img src="/2022/04/06/xian-xing-pan-bie-fen-xi/image-20220406195125943.png" alt="image-20220406195125943"></p><p>分子为投影数据后的均值只差，分母为方差之后，LDA 的目的就是使得 J 值最大化，那么可以理解为<strong>最大化分子，即使得类别之间的距离越远</strong>，同时<strong>最小化分母，使得每个类别内部的方差越小</strong>，这样就能使得每个类类别的数据可以在投影矩阵 w 的映射下，分的越开。</p><blockquote><p>lda = LinearDiscriminantAnalysis()<br>{‘n_components’: None,<br>, ‘priors’: None,<br>, ‘shrinkage’: None,<br>, ‘solver’: ‘svd’,<br>, ‘store_covariance’: False,<br>, ‘tol’: 0.0001}</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>discriminant_analysis <span class="token keyword">import</span> LinearDiscriminantAnalysis   <span class="token comment"># LDA</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metrics<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D  <span class="token comment"># 导入三维显示工具</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits <span class="token comment"># 导入demo数据制作方法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token punctuation">,</span> confusion_matrixmnist <span class="token operator">=</span> load_digits<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>mnist<span class="token punctuation">.</span>data<span class="token punctuation">,</span> mnist<span class="token punctuation">.</span>target<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 建立 LDA 模型</span>m_lda <span class="token operator">=</span> LinearDiscriminantAnalysis<span class="token punctuation">(</span><span class="token punctuation">)</span>m_lda<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>x_new <span class="token operator">=</span> m_lda<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_new<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_new<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'MNIST with LDA Model'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>y_test_pred <span class="token operator">=</span> m_lda<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集的真实标签:"</span><span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集的预测标签:"</span><span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span><span class="token comment"># 统计每一类别的预测准确率、召回率、F1分数</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归</title>
      <link href="/2022/04/06/luo-ji-hui-gui/"/>
      <url>/2022/04/06/luo-ji-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1><span id="基于逻辑回归的分类预测">基于逻辑回归的分类预测</span></h1><p>Logistic regression，简称LR，是一个分类模型</p><p>逻辑回归模型可以用于预测在给定的过程中，系统或产品的故障的可能性，或者基于观察到的患者特征（年龄，性别，体重指数,各种血液检查的结果等）分析预测发生糖尿病的风险。</p><p><strong>拟合出来的参数就代表了每一个特征(feature)对结果的影响</strong>。但其本质上是一个线性的分类器，很多时候也会拿逻辑回归模型去做一些任务尝试的基线（基础水平）。</p><h3><span id="原理">原理：</span></h3><p><img src="/2022/04/06/luo-ji-hui-gui/image-20220406183225218.png" alt="image-20220406183225218"></p><blockquote><p>当 z=&gt;0时,y=&gt;0.5,分类为1</p><p>当 z&lt;0时,y&lt;0.5,分类为0</p></blockquote><p>其对应的y值我们可以视为类别1的概率预测值.</p><h3><span id="实验基于鸢尾花iris数据集的逻辑回归分类实践">实验：基于鸢尾花（iris）数据集的逻辑回归分类实践</span></h3><p>数据集介绍：该数据集一共包含5个变量，其中4个特征变量，1个目标分类变量。共有150个样本，目标变量为 花的类别 其都属于鸢尾属下的三个亚属，分别是山鸢尾 (Iris-setosa)，变色鸢尾(Iris-versicolor)和维吉尼亚鸢尾(Iris-virginica)。包含的三种鸢尾花的四个特征，分别是花萼长度(cm)、花萼宽度(cm)、花瓣长度(cm)、花瓣宽度(cm)，这些形态特征在过去被用来识别物种。</p><h4><span id="数据可视化">数据可视化</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression   <span class="token comment"># 逻辑回归函数</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_irisdata <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#得到数据特征</span>iris_target <span class="token operator">=</span> data<span class="token punctuation">.</span>target <span class="token comment">#得到数据对应的标签</span>iris_features <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span>data<span class="token punctuation">.</span>feature_names<span class="token punctuation">)</span> <span class="token comment">#利用Pandas转化为DataFrame格式</span><span class="token comment"># print(iris_features.head())</span><span class="token comment">## 合并标签和特征信息</span>iris_all <span class="token operator">=</span> iris_features<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">##进行浅拷贝，防止对于原始数据的修改</span>iris_all<span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span> <span class="token operator">=</span> iris_target<span class="token comment">## 特征与标签组合的散点可视化</span>sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>data<span class="token operator">=</span>iris_all<span class="token punctuation">,</span>diag_kind<span class="token operator">=</span><span class="token string">'hist'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span> <span class="token string">'target'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="二分类">二分类</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression   <span class="token comment"># 逻辑回归函数</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metricsdata <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#得到数据特征</span>iris_target <span class="token operator">=</span> data<span class="token punctuation">.</span>target <span class="token comment">#得到数据对应的标签</span>iris_features <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span>data<span class="token punctuation">.</span>feature_names<span class="token punctuation">)</span> <span class="token comment">#利用Pandas转化为DataFrame格式</span>iris_features_part <span class="token operator">=</span> iris_features<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>iris_target_part <span class="token operator">=</span> iris_target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>    iris_features_part<span class="token punctuation">,</span> iris_target_part<span class="token punctuation">,</span> test_size <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">'lbfgs'</span><span class="token punctuation">)</span>  <span class="token comment">#  逻辑回归模型</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>  <span class="token comment"># 训练模型</span>train_predict <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>test_predict <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">,</span>clf<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'w0'</span><span class="token punctuation">,</span>clf<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集准确率：'</span><span class="token punctuation">,</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>train_predict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集准确率：'</span><span class="token punctuation">,</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>test_predict<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>w [[ 0.45181973 -0.81743611  2.14470304  0.89838607]]<br>w0 [-6.53367714]<br>训练集准确率： 1.0<br>测试集： 1.0</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题</title>
      <link href="/2022/04/02/ba-huang-hou-wen-ti/"/>
      <url>/2022/04/02/ba-huang-hou-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>通过对它攻击位置的研究，可以发现，它攻击了上、下、左、右、左上、左下、右上、右下八个方向；<br>int x[8]={0,0,-1,1,-1,-1,1,1};<br>int y[8]={1,-1,0,0,1,-1,1,-1};</p><p>我们要考虑几个问题：<br>第一、皇后放置后，可以攻击到那些地方（数组标记是否被攻击）<br>第二、除去攻击的地方和已经放置的地方，还剩下哪些地方可以放置（数组存储放置位置，即答案）<br>第三、怎样回溯，因为一定是一行一行的放置，当遇到某一行没有地方的时候，就一定是之前的某一个棋子放错了位置，就返回到之前，需要用一个数组来保存，上一步骤产生的答案</p><h4><span id="一-vector">一、vector</span></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;vector&gt;using namespace std;// 更新数组void put_queen(int x,int y,vector&lt;vector&lt;int&gt;&gt;&amp;attack){    static const int dx[] = {-1,1,0,0,-1,-1,1,1};    static const int dy[] = {0,0,-1,1,-1,1,-1,1};    attack[x][y] = 1;    //数组标记    for(int i=1;i&lt;attack.size();i++){        for(int j=0;j&lt;8;j++){            int nx = x + i*dx[j];            int ny = y + i*dy[j];            if(nx&gt;=0&amp;&amp;nx&lt;attack.size()&amp;&amp;ny&gt;=0&amp;&amp;ny&lt;attack.size()){                attack[nx][ny]=1;            }        }    }}// 回溯函数void backtrack(int k,int n,   //k表示处理的行               vector&lt;string&gt;&amp;queen,   //存放皇后位置               vector&lt;vector&lt;int&gt;&gt;&amp;attack,    //攻击数组               vector&lt;vector&lt;string&gt;&gt;&amp;solve){      //存储全部解法    if(k==n){        solve.push_back(queen);        return ;    }    for(int i=0;i&lt;n;i++){        if(attack[k][i]==0){            vector&lt;vector&lt;int&gt;&gt;tmp = attack;  //备份攻击数组            queen[k][i] = 'q';            put_queen(k,i,attack);            backtrack(k+1,n,queen,attack,solve);            attack = tmp;   //恢复攻击数组            queen[k][i] = '.';  //恢复皇后数组        }    }}// 答案vector&lt;vector&lt;string&gt;&gt;solveNQueens(int n){    vector&lt;vector&lt;string&gt;&gt;solve;    vector&lt;vector&lt;int&gt;&gt;attack;    vector&lt;string&gt;queen;    //初始化    for(int i=0;i&lt;n;i++){        attack.push_back((std::vector&lt;int&gt;()));        for(int j=0;j&lt;n;j++){            attack[i].push_back(0);        }        queen.push_back("");        queen[i].append(n,'.');    }    backtrack(0,n,queen,attack,solve);    return solve;}int main(){    vector&lt;vector&lt;string&gt;&gt;result;    result = solveNQueens(8);    for(int i=0;i&lt;result.size();i++){        cout&lt;&lt;"解法"&lt;&lt;i&lt;&lt;endl;        for(int j=0;j&lt;result[i].size();j++){            cout&lt;&lt;result[i][j].c_str()&lt;&lt;endl;        }        cout&lt;&lt;endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="二-一维数组">二、一维数组</span></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;iomanip&gt;#include &lt;string&gt;using namespace std;//左上角为（0，0）int xx[8]={0,0,-1,1,-1,-1,1,1};int yy[8]={1,-1,0,0,1,-1,1,-1};int a=0,n=8;int attack[20][20];//标记皇后的攻击位置char queen[20][20];//储存皇后的放置的位置int solve[99];void copy(int a[20][20],int b[20][20],int n){    for(int i=0;i&lt;n;i++)    {        for(int j=0;j&lt;n;j++)        {            b[i][j]=a[i][j];        }    }}void put(int x,int y,int n){    attack[x][y]=1;    for(int i=1;i&lt;n;i++)//从皇后位置向1——n-1个距离    {         for(int j=0;j&lt;8;j++)//八个方向         {             int r=x+i*xx[j];             int l=y+i*yy[j];             if(r&gt;=0&amp;&amp;r&lt;n&amp;&amp;l&gt;=0&amp;&amp;l&lt;n) attack[r][l]=1;         }    }}void backtracking(int n,int k){     if(k==n)//终止条件     {         a++;         for(int i=0;i&lt;n;i++)         {             for(int j=0;j&lt;n;j++)             {                 if(queen[i][j]=='Q') solve[a]=solve[a]*10+j+1;             }         }         return ;     }     for(int i=0;i&lt;n;i++)//循环列     {         if(attack[k][i]==0)         {             int temp[20][20];             copy(attack,temp,n);             put(k,i,n);//更新攻击位置             queen[k][i]='Q';             backtracking(n,k+1);             copy(temp,attack,n);//恢复             queen[k][i]='.';//恢复         }     }}int main(){    for(int i=0;i&lt;n;i++)    {        for(int j=0;j&lt;n;j++)        {            attack[i][j]=0;            queen[i][j]='.';        }    }    backtracking(n,0);    for(int i=0;i&lt;91;i++)    {        cout&lt;&lt;solve[i]&lt;&lt;endl;    }return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法-递归 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2022/04/02/kmp/"/>
      <url>/2022/04/02/kmp/</url>
      
        <content type="html"><![CDATA[<p>这段代码，是用string类型来实现的从0开始的字符串，即next数组是从-1开始</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstring&gt;using namespace std;int MaxSize = 300;int getnext(string c,int next[]){    next[0] = -1;    int i=0,j=-1;    while(i &lt; c.length()-1)    {        if(j==-1||c[i]==c[j]) next[++i] = ++j;        else j = next[j];    }}int kmp(string a,string b){    int next[MaxSize];    getnext(b,next);    int i=0,j=0;    while(i!=a.length() &amp;&amp; j!=b.length()){        if(j==-1||a[i]==b[j])        {            i++;            j++;        }        else j = next[j];    }    return i - b.length();}int main(){    string a,b;    cin&gt;&gt;a;    cin&gt;&gt;b;    cout&lt;&lt;kmp(a,b)&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：要先把有符号数强制转换成无符号数，然后再进行比较</strong></p><p>如果它的一个运算数是有符号的而另一个是无符号的，那么就会隐式地将有符号参数强制类型转换为无符号数。</p><p><img src="/2022/04/02/kmp/image-20220402224806741.png" alt="image-20220402224806741"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>发纸牌</title>
      <link href="/2022/04/02/fa-zhi-pai/"/>
      <url>/2022/04/02/fa-zhi-pai/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>批量重命名</title>
      <link href="/2022/04/01/pi-liang-chong-ming-ming/"/>
      <url>/2022/04/01/pi-liang-chong-ming-ming/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">rename</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> s    filelist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>        Olddir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>files<span class="token punctuation">)</span>        filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        filetype <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        Newdir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>Olddir<span class="token punctuation">,</span>Newdir<span class="token punctuation">)</span>        a <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> <span class="token string">"./海贼图片"</span>rename<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自制数据集</title>
      <link href="/2022/04/01/zi-zhi-shu-ju-ji/"/>
      <url>/2022/04/01/zi-zhi-shu-ju-ji/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86resize">一、数据预处理（resize）</a></li><li><a href="#%E4%BA%8C-dataset%E7%B1%BB">二、Dataset类</a><ul><li><a href="#1-%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E7%9A%84%E7%B4%A2%E5%BC%95">1、制作图片数据的索引</a></li><li><a href="#2-%E6%9E%84%E5%BB%BAdataset%E5%AD%90%E7%B1%BB">2、构建Dataset子类</a></li><li><a href="#3-%E5%88%B6%E4%BD%9C%E5%8C%85%E5%90%AB%E8%B7%AF%E5%BE%84%E5%92%8C%E6%A0%87%E7%AD%BE%E7%9A%84txt%E6%96%87%E4%BB%B6">3、制作包含路径和标签的txt文件</a></li><li><a href="#3-%E8%AF%BB%E5%8F%96txt%E6%96%87%E4%BB%B6%E7%BB%A7%E6%89%BFdataset">3、读取txt文件，继承Dataset</a></li></ul></li><li><a href="#ps%E5%A4%84%E7%90%86%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE">ps:处理缺失数据</a></li></ul><!-- tocstop --><p><img src="/2022/04/01/zi-zhi-shu-ju-ji/202008261737219-16442337220204.png" alt="img"></p><h1><span id="一-数据预处理resize">一、数据预处理（resize）</span></h1><p>数据在神经网络的模型中进行传播前首先需要保证尺寸相同(对于所有图像，我们将其Resize到100x100的尺寸)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmDataPath<span class="token operator">=</span><span class="token string">r'TrainingData'</span><span class="token comment"># 训练数据</span>SavePath<span class="token operator">=</span><span class="token string">r'ResizedData'</span><span class="token keyword">for</span> img_dir <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>DataPath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 包含类别信息的文件夹</span>    img_label_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>DataPath<span class="token punctuation">,</span>img_dir<span class="token punctuation">)</span>    <span class="token comment"># 存储处理后的图片的文件夹</span>    save_label_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>SavePath<span class="token punctuation">,</span>img_dir<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save_label_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>save_label_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> tbar<span class="token punctuation">:</span>        <span class="token comment"># 进入到文件夹下进行图片遍历</span>        image_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_label_path<span class="token punctuation">,</span>image<span class="token punctuation">)</span>        <span class="token comment"># 使用cv2读取图片</span>        image_old<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>        image_new<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image_old<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 保存图像</span>        save_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_label_path<span class="token punctuation">,</span>image<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span>image_new<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="二-dataset类">二、Dataset类</span></h1><p>​        Dataset类作为所有的datasets的基类存在，所有的datasets都需要继承它，其中父类中的两个私有成员函数必须被重载，否则将会触发错误提示。</p><p>​        重点看 getitem函数，getitem接收一个index，然后返回图片数据和标签，这个index通常指的是一个list的index，这个list的每个元素就包含了图片数据的路径和标签信息。</p><p>​        然而，如何制作这个list呢，通常的方法是将图片的路径和标签信息存储在一个txt中，然后从该txt中读取。那么读取自己数据的基本流程就是：</p><p>1.制作存储了图片的路径和标签信息的txt<br>2.将这些信息转化为list，该list每一个元素对应一个样本<br>3.通过getitem函数，读取数据和标签，并返回数据和标签</p><h3><span id="1-制作图片数据的索引">1、制作图片数据的索引</span></h3><h3><span id="2-构建dataset子类">2、构建Dataset子类</span></h3><p>图像存储在一个目录<code>img_dir</code>中，它们的标签分别存储在一个 CSV 文件<code>annotations_file</code>中</p><p>​        __init__函数在实例化 Dataset 对象时运行一次,初始化包含图像、注释文件和两种转换的目录</p><p>​        1、初始化中从我们准备好的txt里获取图片的路径和标签, 2、transform是一个Compose类型，里边有一个list，list中就会定义了各种对图像进行处理的操作，可以设置减均值，除标准差，随机裁剪，旋转，翻转，仿射变换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init___</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>txtpath<span class="token punctuation">,</span>transform <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>target_transform <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>ims<span class="token punctuation">,</span>self<span class="token punctuation">.</span>labels <span class="token operator">=</span> read_txt<span class="token punctuation">(</span>txtpath<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform    self<span class="token punctuation">.</span>target_transform <span class="token operator">=</span> target_transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>     ==__getitem__ 函数==从给定索引处的数据集中加载并返回一个样本idx。基于索引，它识别图像在磁盘上的位置，使用将其转换为张量read_image，从 csv 数据中检索相应的标签self.img_labels，调用它们的变换函数（如果适用），并返回张量图像和相应的标签一个元组。</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    im_path <span class="token operator">=</span> self<span class="token punctuation">.</span>ims<span class="token punctuation">[</span>index<span class="token punctuation">]</span>       label <span class="token operator">=</span> self<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment"># 利用Image.open对图片进行读取，img类型为 Image ，mode=‘RGB’</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>im_path<span class="token punctuation">)</span>     transf <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> transf<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    label <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>asarry<span class="token punctuation">(</span>label<span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> image<span class="token punctuation">,</span>label<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         <strong>len</strong> 函数返回我们数据集中的样本数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ims<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="3-制作包含路径和标签的txt文件">3、制作包含路径和标签的txt文件</span></h3><p>路径建议使用绝对路径，以防文件相对位置发生变化时读取失败。<br>标签一定要是<strong>整型</strong>变量（张量求梯度），一定要从0开始。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> randomdatapath <span class="token operator">=</span> <span class="token string">r'ResizedData'</span><span class="token comment"># 训练数据</span>absolutePath <span class="token operator">=</span> <span class="token string">r'D:\data'</span><span class="token comment"># 这里需要替换成catvsdog的绝对路径</span>label <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> dataclass <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>datapath<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 读取猫狗数据  ##直接返回这一（拼接）路径下文件组成的列表</span>        data <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>datapath<span class="token punctuation">,</span>dataclass<span class="token punctuation">)</span><span class="token punctuation">)</span>        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment"># 训练集大小：占所有数据的4/5.  # 将图片按照8:2划分为训练、验证</span>        train_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">//</span> <span class="token number">5</span>        train_list<span class="token punctuation">,</span>test_list <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>train_len<span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>train_len<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># 将训练集写入train.txt</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>absolutePath<span class="token punctuation">,</span><span class="token string">'train.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> img <span class="token keyword">in</span> train_list<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>absolutePath<span class="token punctuation">,</span>datapath<span class="token punctuation">,</span>dataclass<span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标签为{}的训练集图片处理完毕"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dataclass<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 将验证集写入test.txt</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>absolutePath<span class="token punctuation">,</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> img <span class="token keyword">in</span> test_list<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>absolutePath<span class="token punctuation">,</span>datapath<span class="token punctuation">,</span>dataclass<span class="token punctuation">,</span>img<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标签为{}的验证集图片处理完毕"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dataclass<span class="token punctuation">)</span><span class="token punctuation">)</span>        label<span class="token operator">+=</span><span class="token number">1</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-读取txt文件继承dataset">3、读取txt文件，继承Dataset</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataset <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">def</span> <span class="token function">read_txt</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    ims<span class="token punctuation">,</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> sample <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            im<span class="token punctuation">,</span>label <span class="token operator">=</span> sample<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spilt<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>            ims<span class="token punctuation">.</span>append<span class="token punctuation">(</span>im<span class="token punctuation">)</span>            labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token keyword">return</span> ims<span class="token punctuation">,</span>labels<span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># txtpath就是上面提到的list，其一个元素对应一个样本的路径和标签，其实就是txt中的一行</span>    <span class="token keyword">def</span> <span class="token function">__init___</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>txtpath<span class="token punctuation">,</span>transform <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ims<span class="token punctuation">,</span>self<span class="token punctuation">.</span>labels <span class="token operator">=</span> read_txt<span class="token punctuation">(</span>txtpath<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>im_path<span class="token punctuation">)</span>        transf <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>        image <span class="token operator">=</span> transf<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        label <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>asarry<span class="token punctuation">(</span>label<span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> image<span class="token punctuation">,</span>label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ims<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="ps处理缺失数据">ps:处理缺失数据</span></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">inputs<span class="token punctuation">,</span> outputs <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># 数值</span>inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 插值</span><span class="token comment"># 不是数值，把这特别的类转为值</span>inputs <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span>dummy_na<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>opencv</title>
      <link href="/2022/04/01/opencv/"/>
      <url>/2022/04/01/opencv/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">1、基本操作</a><ul><li><a href="#1-%E5%9B%BE%E5%83%8F%E7%9A%84io%E6%93%8D%E4%BD%9C">1、图像的IO操作</a></li><li><a href="#2-%E5%B1%9E%E6%80%A7">2、属性</a></li><li><a href="#3-%E9%80%9A%E9%81%93">3、通道</a></li><li><a href="#4-%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C">4、算术操作</a></li></ul></li><li><a href="#2-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86">2、图像处理</a><ul><li><a href="#1-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2">1、几何变换</a><ul><li><a href="#11%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE">1.1图像缩放</a></li><li><a href="#12%E5%9B%BE%E5%83%8F%E5%B9%B3%E7%A7%BB">1.2图像平移</a></li><li><a href="#13%E5%9B%BE%E5%83%8F%E6%97%8B%E8%BD%AC">1.3图像旋转</a></li><li><a href="#14%E4%BB%A3%E7%A0%81%E5%B1%95%E7%A4%BA">1.4代码展示</a></li></ul></li><li><a href="#2-%E5%BD%A2%E6%80%81%E5%AD%A6%E6%93%8D%E4%BD%9C">2、形态学操作</a></li><li><a href="#3-%E5%9B%BE%E5%83%8F%E5%B9%B3%E6%BB%91">3、图像平滑</a><ul><li><a href="#31%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0">3.1图像噪声</a></li><li><a href="#32%E5%9B%BE%E5%83%8F%E5%B9%B3%E6%BB%91">3.2图像平滑</a></li><li><a href="#33-%E4%BB%A3%E7%A0%81%E5%B1%95%E7%A4%BA">3.3 代码展示</a></li></ul></li><li><a href="#4-%E7%9B%B4%E6%96%B9%E5%9B%BE">4、直方图</a><ul><li><a href="#41-%E7%BB%98%E5%88%B6%E7%9B%B4%E6%96%B9%E5%9B%BE">4.1 绘制直方图</a></li><li><a href="#42-%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96">4.2 直方图均衡化</a></li></ul></li><li><a href="#5-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B">5、边缘检测</a><ul><li><a href="#51-sobel%E6%A3%80%E6%B5%8B%E7%AE%97%E5%AD%90-scharr%E7%AE%97%E5%AD%90">5.1 Sobel检测算子 / Scharr算子</a></li><li><a href="#52-laplacian%E7%AE%97%E5%AD%90">5.2 Laplacian算子</a></li><li><a href="#53-canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B">5.3 Canny边缘检测</a></li><li><a href="#54-%E4%BB%A3%E7%A0%81%E5%B1%95%E7%A4%BA">5.4 代码展示</a></li></ul></li><li><a href="#6-%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D">6、模板匹配</a><ul><li><a href="#62-%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2">6.2 霍夫变换</a></li></ul></li><li><a href="#7-%E4%BA%8C%E5%80%BC%E5%8C%96">7、二值化</a><ul><li><a href="#71-%E5%85%A8%E5%B1%80%E4%BA%8C%E5%80%BC%E5%8C%96">7.1 全局二值化</a></li><li><a href="#72-%E5%B1%80%E9%83%A8%E4%BA%8C%E5%80%BC%E5%8C%96">7.2 局部二值化</a></li></ul></li></ul></li><li><a href="#3-%E8%89%B2%E5%BD%A9%E6%8A%96%E5%8A%A8">3、色彩抖动</a></li><li><a href="#4-%E8%89%B2%E5%9F%9F%E8%BD%AC%E6%8D%A2">4、色域转换</a></li><li><a href="#5-%E4%BA%AE%E5%BA%A6%E5%92%8C%E5%AF%B9%E6%AF%94%E5%BA%A6">5、亮度和对比度</a></li></ul><!-- tocstop --><h1><span id="1-基本操作">1、基本操作</span></h1><h2><span id="1-图像的io操作">1、图像的IO操作</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token comment"># 读取图像</span><span class="token comment"># cv.imread(.jpg,0)</span><span class="token comment"># 有中文路径，通常借助numpy操作</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>path"<span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''cv.IMREAD*COLOR：以彩色模式加载图像，任何图像的透明度都将被忽略。这是默认参数。cv.IMREAD*GRAYSCALE：以灰度模式加载图像cv.IMREAD_UNCHANGED：包括alpha通道的加载图像模式。可以使用1、0或者-1来替代上面三个标志'''</span><span class="token comment"># 显示图像</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 留时间</span><span class="token comment"># 保存图像</span>cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"名字"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="2-属性">2、属性</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">img<span class="token punctuation">.</span>shape <span class="token comment">#形状</span>img<span class="token punctuation">.</span>size <span class="token comment">#大小</span>img<span class="token punctuation">.</span>dtype <span class="token comment">#类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="3-通道">3、通道</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通道拆分</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r <span class="token operator">=</span> cv<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment"># 通道合并</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="4-算术操作">4、算术操作</span></h2><p>前提：两幅图大小必须相同</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加起来</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img1<span class="token punctuation">,</span>img2<span class="token punctuation">)</span><span class="token comment"># 按比例混合</span>img3 <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span>img2<span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="2-图像处理">2、图像处理</span></h1><p>img.<a href="https://so.csdn.net/so/search?q=shape&amp;spm=1001.2101.3001.7020">shape</a>[ : 2] 表示取彩色图片的长、宽。<br>img.shape[ : 3] 则表示取彩色图片的长、宽、<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E9%81%93&amp;spm=1001.2101.3001.7020">通道</a>。</p><h2><span id="1-几何变换">1、几何变换</span></h2><h3><span id="11图像缩放">1.1图像缩放</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span>dsize<span class="token punctuation">,</span>fx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>interpolation<span class="token operator">=</span>cv<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''dsize: 绝对尺寸，直接指定调整后图像的大小fx,fy: 相对尺寸，将dsize设置为None，然后将fx和fy设置为比例因子即可'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="12图像平移">1.2图像平移</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span>M<span class="token punctuation">,</span>dsize<span class="token punctuation">)</span> <span class="token comment"># M： 2*∗3移动矩阵</span>M <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 平移矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/01/opencv/image-20220326161142162.png" alt="image-20220326161142162"></p><h3><span id="13图像旋转">1.3图像旋转</span></h3><p>在OpenCV中图像旋转首先根据旋转角度和旋转中心获取旋转矩阵，然后根据旋转矩阵进行变换，即可实现任意角度和任意中心的旋转效果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 返回一个矩阵</span>cv<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span>center<span class="token punctuation">,</span> angle<span class="token punctuation">,</span> scale<span class="token punctuation">)</span>M <span class="token operator">=</span> cv<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span><span class="token punctuation">(</span>cols<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rows<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''center：旋转中心angle：旋转角度scale：缩放比例'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="14代码展示">1.4代码展示</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> os<span class="token keyword">import</span> d2data<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlibimg1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">r"./海贼图片/1.jpg"</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 1、图像缩放</span><span class="token comment"># 绝对尺寸</span>rows<span class="token punctuation">,</span>cols <span class="token operator">=</span> img1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 原来形状</span>res <span class="token operator">=</span> cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>cols<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>rows<span class="token punctuation">)</span><span class="token punctuation">,</span>interpolation<span class="token operator">=</span>cv<span class="token punctuation">.</span>INTER_CUBIC<span class="token punctuation">)</span><span class="token comment"># 相对尺寸</span>res1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span>fx<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>fy<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># 2、图像平移</span>M <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 平移矩阵</span>dstyi <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img1<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3、图像旋转</span>M <span class="token operator">=</span> cv<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span><span class="token punctuation">(</span>cols<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rows<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>dstzhuan <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img1<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 图像展示</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>fig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>ncols<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"绝对尺度（放大）"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"原图"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"相对尺度（缩小）"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"原图"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>dstyi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"平移后结果"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>dstzhuan<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"旋转后结果"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/01/opencv/image-20220326162736138.png" alt="image-20220326162736138"></p><h2><span id="2-形态学操作">2、形态学操作</span></h2><h2><span id="3-图像平滑">3、图像平滑</span></h2><h3><span id="31图像噪声">3.1图像噪声</span></h3><p><strong>椒盐噪声</strong>：一种随机出现的白点或者黑点，可能是亮的区域有黑色像素或是在暗的区域有白色像素（或是两者皆有）</p><p><strong>高斯噪声</strong>：噪声密度函数服从高斯分布</p><h3><span id="32图像平滑">3.2图像平滑</span></h3><p>图像平滑从信号处理的角度看就是去除其中的高频信息，<strong>保留低频信息</strong></p><p>低通滤波可以去除图像中的噪声，对图像进行平滑</p><p><strong>均值滤波:</strong><br>它只是用卷积框覆盖区域所有像素的平均值来代替中心元素。<br>去噪的同时去除了很多细节部分，将图像变得模糊。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>img<span class="token punctuation">,</span> ksize<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> borderType<span class="token punctuation">)</span><span class="token comment"># ksize：卷积核的大小</span><span class="token comment"># anchor：默认值 (-1,-1) ，表示核中心</span><span class="token comment"># borderType：边界类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>高斯滤波</strong>:</p><p>将”中心点”作为原点，其他点按照其在正态曲线上的位置，分配权重，就可以得到一个加权平均值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>img<span class="token punctuation">,</span>ksize<span class="token punctuation">,</span>sigmaX<span class="token punctuation">,</span>sigmay<span class="token punctuation">,</span>borderType<span class="token punctuation">)</span><span class="token comment"># ksize:高斯卷积核的大小，注意 ： 卷积核的宽度和高度都应为奇数，且可以不同</span><span class="token comment"># sigmaX: 水平方向的标准差</span><span class="token comment"># sigmaY: 垂直方向的标准差，默认值为0，表示与sigmaX相同</span><span class="token comment"># borderType:填充边界类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>中值滤波</strong>：</p><p>用像素点邻域灰度值的中值来代替该像素点的灰度值。</p><p>对椒盐噪声来说尤其有用，因为它不依赖于邻域内那些与典型值差别很大的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>src<span class="token punctuation">,</span> ksize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="33-代码展示">3.3 代码展示</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> os<span class="token keyword">import</span> d2data<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token comment"># 将图片加入黑点（类似椒盐噪声）</span>img1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">r"./海贼图片/z.jpg"</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 1、均值滤波</span>blur1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2、高斯滤波</span>blur2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 3、中值滤波</span>blur3 <span class="token operator">=</span> cv<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment"># 图像展示</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>fig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ncols<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>blur1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"均值滤波"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"原图"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>blur2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"高斯滤波"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>blur3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中值滤波"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/01/opencv/image-20220326185011554.png" alt="image-20220326185011554"></p><h2><span id="4-直方图">4、直方图</span></h2><h3><span id="41-绘制直方图">4.1 绘制直方图</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv2<span class="token punctuation">.</span>calcHist<span class="token punctuation">(</span>images<span class="token punctuation">,</span>channels<span class="token punctuation">,</span>mask<span class="token punctuation">,</span>histSize<span class="token punctuation">,</span>ranges<span class="token punctuation">[</span><span class="token punctuation">,</span>hist<span class="token punctuation">[</span><span class="token punctuation">,</span>accumulate<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># channels: 如果输入图像是灰度图，它的值就是 [0]；如果是彩色图像的话，传入的参数可以是 [0]，[1]，[2] 它们分别对应着通道 B，G，R。 　　</span><span class="token comment"># mask: 掩模图像。要统计整幅图像的直方图就把它设为 None。但是如果你想统计图像某一部分的直方图的话，你就需要制作一个掩模图像，并使用它。（后边有例子） 　　</span><span class="token comment"># histSize:BIN 的数目。也应该用中括号括起来，例如：[256]。 　　</span><span class="token comment"># ranges: 像素值范围，通常为 [0，256]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="42-直方图均衡化">4.2 直方图均衡化</span></h3><p>这种方法<strong>提高图像整体的对比度</strong>，特别是有用数据的像素值分布比较接近时，可以提高骨架结构的显示，另外在曝光过度或不足的图像中可以更好的突出细节。</p><p><strong>自适应的直方图均衡化</strong>：整幅图像会被分成很多小块，这些小块被称为“tiles”（在 OpenCV 中 tiles 的 大小默认是 8x8），然后再对每一个小块分别进行直方图均衡化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>equalizeHist<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment"># 自适应的直方图均衡化</span>clahe <span class="token operator">=</span> cv<span class="token punctuation">.</span>createCLAHE<span class="token punctuation">(</span>clipLimit<span class="token punctuation">,</span> tileGridSize<span class="token punctuation">)</span>res <span class="token operator">=</span> clahe<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment"># clipLimit: 对比度限制，默认是40</span><span class="token comment"># tileGridSize: 分块的大小，默认为8*8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="5-边缘检测">5、边缘检测</span></h2><p>标识数字图像中亮度变化明显的点</p><p><strong>基于搜索</strong>：通过寻找图像一阶导数中的最大值来检测边界，然后利用计算结果估计边缘的局部方向，通常采用梯度的方向，并利用此方向找到局部梯度模的最大值，代表算法是Sobel算子和Scharr算子。</p><p><strong>基于零穿越</strong>：通过寻找图像二阶导数零穿越来寻找边界，代表算法是Laplacian算子。</p><h3><span id="51-sobel检测算子-scharr算子">5.1 Sobel检测算子 / Scharr算子</span></h3><p>Sobel算子：<strong>高斯平滑</strong>与微分操作的结合体，所以其<strong>抗噪声能力</strong>很强，用途较多。尤其是效率要求较高，而对<strong>细纹理不太关心</strong>的时候。</p><p>Sobel算子是在两个方向计算的, cv2.addWeighted( )函数将其组合</p><p>Scharr算子：但该函数仅作用于大小为<strong>3的内核</strong>。该函数的运算与Sobel函数一样快，但结果却更加精确</p><p><strong>对灰度渐变和噪声较多的处理效果比较好</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Sobel_x_or_y <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img<span class="token punctuation">,</span> ddepth<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> ksize<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> delta<span class="token punctuation">,</span> borderType<span class="token punctuation">)</span>Scale_abs <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 格式转换函数</span>result <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>Sobel_x<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> Sobel_y<span class="token punctuation">,</span> beta<span class="token punctuation">)</span> <span class="token comment"># 图像混合</span><span class="token comment"># ddepth: 图像的深度</span><span class="token comment"># dx和dy: 指求导的阶数，0表示这个方向上没有求导，取值为0、1。</span><span class="token comment"># ksize: 是Sobel算子的大小，即卷积核的大小，必须为奇数1、3、5、7，默认为3。</span><span class="token comment">#   注意：如果ksize=-1，就演变成为3x3的Scharr算子。</span><span class="token comment"># scale：缩放导数的比例常数，默认情况为没有伸缩系数。</span><span class="token comment"># borderType：图像边界的模式，默认值为cv2.BORDER_DEFAULT。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="52-laplacian算子">5.2 Laplacian算子</span></h3><p>Laplacian是利用二阶导数来检测边缘</p><p><strong>造成边缘丢失</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">laplacian <span class="token operator">=</span> cv<span class="token punctuation">.</span>Laplacian<span class="token punctuation">(</span>img<span class="token punctuation">,</span> ddepth<span class="token punctuation">[</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token punctuation">,</span> ksize<span class="token punctuation">[</span><span class="token punctuation">,</span> scale<span class="token punctuation">[</span><span class="token punctuation">,</span> delta<span class="token punctuation">[</span><span class="token punctuation">,</span> borderType<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Ddepth: 图像的深度，-1表示采用的是原图像相同的深度，目标图像的深度必须大于等于原图像的深度；</span><span class="token comment"># ksize：算子的大小，即卷积核的大小，必须为1,3,5,7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="53-canny边缘检测">5.3 Canny边缘检测</span></h3><p>原理：噪声去除(高斯滤波器)+计算图像梯度+非极大值抑制+滞后阈值（当图像的灰度梯度高于 maxVal 时被认为是真的边界， 低于 minVal 的边界会被抛弃）</p><p><strong>不易受噪声干扰，容易检测出真正的弱边缘</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">canny <span class="token operator">=</span> cv<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>img<span class="token punctuation">,</span> threshold1<span class="token punctuation">,</span> threshold2<span class="token punctuation">)</span><span class="token comment"># img:灰度图</span><span class="token comment"># threshold1: minval，较小的阈值将间断的边缘连接起来</span><span class="token comment"># threshold2: maxval，较大的阈值检测图像中明显的边缘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="54-代码展示">5.4 代码展示</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> os<span class="token keyword">import</span> d2data<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlibimg1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">r"./海贼图片/1.jpg"</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 1、Sobel算子</span>x <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_16S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 计算Sobel卷积结果</span>y <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_16S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>Scale_absX <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment"># convert转换 scale缩放</span>Scale_absY <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>y<span class="token punctuation">)</span>result1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>Scale_absX<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> Scale_absY<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 结果合成</span><span class="token comment"># 2、Scharr</span>x <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_16S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ksize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_16S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ksize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>Scale_absX <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment"># convert转换 scale缩放</span>Scale_absY <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>y<span class="token punctuation">)</span>result2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>Scale_absX<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> Scale_absY<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 3、Laplacian算子</span>result3 <span class="token operator">=</span> cv<span class="token punctuation">.</span>Laplacian<span class="token punctuation">(</span>img1<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>CV_16S<span class="token punctuation">)</span>result3 <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token comment"># 4、Canny</span>img2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">r"./海贼图片/1.jpg"</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 灰度图</span>lowThreshold <span class="token operator">=</span> <span class="token number">0</span>max_lowThreshold <span class="token operator">=</span> <span class="token number">100</span>result4 <span class="token operator">=</span> cv<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>img2<span class="token punctuation">,</span> lowThreshold<span class="token punctuation">,</span> max_lowThreshold<span class="token punctuation">)</span><span class="token comment"># 图像展示</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>fig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ncols<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"原图"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Sobel"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>result2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Scharr"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>result3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Laplacian"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>result4<span class="token punctuation">,</span>cmap <span class="token operator">=</span> plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Canny"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/01/opencv/image-20220326194617849.png" alt="image-20220326194617849"></p><h2><span id="6-模板匹配">6、模板匹配</span></h2><p>模板匹配 : 就是在给定的图片中查找和模板最相似的区域</p><p>ps : 图片略大比较好</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> cv<span class="token punctuation">.</span>matchTemplate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>template<span class="token punctuation">,</span>method<span class="token punctuation">)</span>min_val<span class="token punctuation">,</span> max_val<span class="token punctuation">,</span> min_loc<span class="token punctuation">,</span> max_loc <span class="token operator">=</span> cv<span class="token punctuation">.</span>minMaxLoc<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment"># 定位最匹配的区域，并标注</span><span class="token comment"># img: 要进行模板匹配的图像</span><span class="token comment"># Template ：模板</span><span class="token comment"># method：实现模板匹配的算法，主要有：</span><span class="token comment">## 平方差匹配(CV_TM_SQDIFF)：利用模板与图像之间的平方差进行匹配，最好的匹配是0，匹配越差，匹配的值越大。</span><span class="token comment">## 相关匹配(CV_TM_CCORR)：利用模板与图像间的乘法进行匹配，数值越大表示匹配程度较高，越小表示匹配效果差。 (完全不好用！！)</span><span class="token comment">## 利用相关系数匹配(CV_TM_CCOEFF)：利用模板与图像间的相关系数匹配，1表示完美的匹配，-1表示最差的匹配。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="62-霍夫变换">6.2 霍夫变换</span></h3><p>常用来提取图像中的直线和圆等几何形状</p><h2><span id="7-二值化">7、二值化</span></h2><h3><span id="71-全局二值化">7.1 全局二值化</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span> <span class="token comment"># 变灰度图像</span>thr<span class="token punctuation">,</span> img_rst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span><span class="token comment"># 第一个返回值，得到图像的阈值，</span><span class="token comment"># 第二个返回值，也就是阈值处理后的图像，</span><span class="token comment"># x:用来对像素值进行分类的阈值。</span><span class="token comment"># y:当像素值高于（有时是小于）阈值时应该被赋予的新的像素值</span><span class="token comment"># Methods:不同的不同的阈值方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="72-局部二值化">7.2 局部二值化</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">dst <span class="token operator">=</span> threshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="3-色彩抖动">3、色彩抖动</span></h1><p>色彩抖动是通过随机调整原始图片的饱和度，亮度，对比度来对产生新的图像，增加数据集</p><h1><span id="4-色域转换">4、色域转换</span></h1><p>目的：忽略里面的一部分，把另一部分（对应颜色）提取出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># BGR转灰度</span>image <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span><span class="token comment"># 灰度转BGR</span>image <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>mask <span class="token operator">=</span> cv<span class="token punctuation">.</span>inRange（hsv_nemo，light_orange，dark_orange）res <span class="token operator">=</span> cv<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>nemo<span class="token punctuation">,</span> nemo<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span><span class="token comment"># inRange()接受三个参数：图像、下限和上限</span>light_orange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>dark_orange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>light_white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>dark_white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="5-亮度和对比度">5、亮度和对比度</span></h1><p>亮度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> skimage <span class="token keyword">import</span> exposuredst1 <span class="token operator">=</span> exposure<span class="token punctuation">.</span>adjust_gamma<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#调暗</span>dst2 <span class="token operator">=</span> exposure<span class="token punctuation">.</span>adjust_gamma<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment">#调亮</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对比度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">clahe <span class="token operator">=</span> cv<span class="token punctuation">.</span>createCLAHE<span class="token punctuation">(</span>clipLimit<span class="token punctuation">,</span> tileGridSize<span class="token punctuation">)</span>res <span class="token operator">=</span> clahe<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorboardx</title>
      <link href="/2022/04/01/tensorboardx/"/>
      <url>/2022/04/01/tensorboardx/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E5%88%9B%E5%BB%BAsummarywriter">一、创建SummaryWriter</a></li><li><a href="#%E4%BA%8C-add%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95%E6%95%B0%E6%8D%AE">二、ADD方法记录数据</a></li></ul><!-- tocstop --><h3><span id="一-创建summarywriter">一、创建SummaryWriter</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter`writer1 <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">'runs/exp'</span><span class="token punctuation">)</span> <span class="token comment">#提供一个路径，将使用该路径来保存日志</span>writer2 <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#无参数，默认将使用 runs/日期时间 路径来保存日志</span>writer3 <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span>comment<span class="token operator">=</span><span class="token string">'resnet'</span><span class="token punctuation">)</span>  <span class="token comment">#使用 runs/日期时间-comment 路径来保存日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="二-add方法记录数据">二、ADD方法记录数据</span></h3><h4><span id="1-数字">1、数字</span></h4><p><code>add_scalar(tag, scalar_value, global_step=None, walltime=None)</code></p><p>// 数据名称（string) //数组常量值（float）//训练的step //记录发生的时间</p><h4><span id="2-图片">2、图片</span></h4><p>##一次只能插入一张图片</p><p><code>add_image(tag, img_tensor, global_step=None, walltime=None, dataformats='CHW') </code>  </p><p>//数据名称 //图像数据（Tensor / array）//训练的step //</p><p>记录发生的时间 //图像数据的格式，默认为 ‘CHW’</p><p>##一次插入多张图片</p><p>1.使用 <code>torchvision</code> 中的 <code>make_grid</code> 方法将多张图片拼合成一张图片后，再调用 <code>add_image</code> 方法。</p><p>2.使用 <code>SummaryWriter</code> 的 <code>add_images</code> 方法，参数和 <code>add_image</code> 类似</p><h4><span id="3-直方图">3、直方图</span></h4><p><code>add_histogram(tag, values, global_step=None, bins='tensorflow', walltime=None, max_bins=None) </code></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VGG</title>
      <link href="/2022/04/01/vgg/"/>
      <url>/2022/04/01/vgg/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-vgg%E5%9D%97">一、VGG块</a></li><li><a href="#%E4%BA%8C-vgg%E6%9E%B6%E6%9E%84">二、VGG架构</a></li><li><a href="#%E4%B8%89-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">三、代码实现</a></li></ul><!-- tocstop --><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># LeNet(1995):</span><span class="token number">2</span>卷积 <span class="token operator">+</span> 池化层<span class="token number">2</span>全连接层<span class="token comment"># AlexNet</span>更大更深ReLu<span class="token punctuation">,</span>Droput<span class="token punctuation">,</span>数据增强<span class="token comment"># VGG</span>更大更深的AlexNet<span class="token punctuation">(</span>重复的VGG块<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="一-vgg块">一、VGG块</span></h2><blockquote><p>3×3卷积（填充1）（n层，m通道）</p><p>2×2最大池化层（步幅2）</p></blockquote><h2><span id="二-vgg架构">二、VGG架构</span></h2><blockquote><p>多个VGG块后接全连接层</p><p>不同次数的重复块得到不同的架构，VGG-16,VGG-19</p></blockquote><h2><span id="三-代码实现">三、代码实现</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> d21 <span class="token keyword">import</span> torch <span class="token keyword">as</span> d21<span class="token keyword">def</span> <span class="token function">vgg_block</span><span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span>in_channels<span class="token punctuation">,</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>    layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_convs<span class="token punctuation">)</span><span class="token punctuation">:</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token keyword">in</span><span class="token operator">-</span>channels<span class="token punctuation">,</span>out_channels<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        in_channels <span class="token operator">=</span> out_channels    layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>conv_arch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">##5块,(多少层卷积，输出通道数)</span><span class="token keyword">def</span> <span class="token function">vgg</span><span class="token punctuation">(</span>conv_arch<span class="token punctuation">)</span><span class="token punctuation">:</span>    conv_blks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    in_channels <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span>out_channels<span class="token punctuation">)</span> <span class="token keyword">in</span> conv_arch<span class="token punctuation">:</span>        conv_blks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>vgg_block<span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span>in_channels<span class="token punctuation">,</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>        in_channels <span class="token operator">=</span> out_channels    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>        <span class="token operator">*</span>conv_blks<span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>out_channels<span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model <span class="token operator">=</span> vgg<span class="token punctuation">(</span>conv_arch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeNet</title>
      <link href="/2022/04/01/lenet/"/>
      <url>/2022/04/01/lenet/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#lenet%E7%BD%91%E7%BB%9C%E5%9F%BA%E4%BA%8Ecifar-10-%E6%95%B0%E6%8D%AE%E9%9B%86">LeNet网络（基于CIFAR-10 数据集）</a></li></ul><!-- tocstop --><h1><span id="lenet网络基于cifar-10-数据集">LeNet网络（基于CIFAR-10 数据集）</span></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> torch <span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span>transformsdevice <span class="token operator">=</span> <span class="token string">"cuda"</span><span class="token comment">##定义类</span><span class="token keyword">class</span> <span class="token class-name">Network</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span>Network<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">##输入:(3*32*32); 输出：(16*14*14)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">##输入:(16*14*14); 输出：(32*5*5)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">##输入:(32*5*5); 输出：(1*10)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">###相当于Flatten()</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    model <span class="token operator">=</span> Network<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AlexNet</title>
      <link href="/2022/04/01/alexnet/"/>
      <url>/2022/04/01/alexnet/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%BA%8C-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">二、代码实现</a></li></ul><!-- tocstop --><h2><span id="二-代码实现">二、代码实现</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> d21 <span class="token keyword">import</span> torch <span class="token keyword">as</span> d21model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Cnov2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">384</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span><span class="token number">384</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">6400</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">##丢弃层</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>优化器</title>
      <link href="/2022/04/01/you-hua-qi/"/>
      <url>/2022/04/01/you-hua-qi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%90%84%E7%A7%8D%E4%BC%98%E5%8C%96%E5%99%A8optimizer">各种优化器Optimizer</a><ul><li><a href="#%E4%B8%80-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95gradient-descent">一、梯度下降法(Gradient Descent)</a></li><li><a href="#%E4%BA%8C-%E5%8A%A8%E9%87%8F%E4%BC%98%E5%8C%96%E6%B3%95">二、动量优化法</a></li><li><a href="#%E4%B8%89-%E8%87%AA%E9%80%82%E5%BA%94%E5%AD%A6%E4%B9%A0%E7%8E%87%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95">三、自适应学习率优化算法</a></li></ul></li><li><a href="#optimizer-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">optimizer 工作原理</a></li></ul><!-- tocstop --><h1><span id="各种优化器optimizer">各种优化器Optimizer</span></h1><h2><span id="一-梯度下降法gradient-descent">一、梯度下降法(Gradient Descent)</span></h2><p>1、<strong>标准梯度下降法</strong>(GD)</p><p>​    训练速度慢：每走一步都要要计算调整下一步的方向，下山的速度变慢。在应用于大型数据集中，每输入一个样本都要更新一次参数，且每次迭代都要遍历所有的样本。会使得训练过程及其缓慢，需要花费很长时间才能得到收敛解。<br>​    容易陷入局部最优解：由于是在有限视距内寻找下山的反向。当陷入平坦的洼地，会误以为到达了山地的最低点，从而不会继续往下走。所谓的局部最优解就是鞍点。落入鞍点，梯度为0，使得模型参数不在继续更新。</p><p>2、<strong>批量梯度下降法(BGD)</strong></p><p>3、<strong>随机梯度下降法(SGD)</strong></p><p><code>train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)</code></p><p>优点：<br>虽然SGD需要走很多步的样子，但是对梯度的要求很低（计算梯度快）。而对于引入噪声，大量的理论和实践工作证明，只要噪声不是特别大，SGD都能很好地收敛。<br>应用大型数据集时，训练速度很快。比如每次从百万数据样本中，取几百个数据点，算一个SGD梯度，更新一下模型参数。相比于标准梯度下降法的遍历全部样本，每输入一个样本更新一次参数，要快得多。<br>缺点：<br>SGD在随机选择梯度的同时会引入噪声，使得权值更新的方向不一定正确。<br>此外，SGD也没能单独克服局部最优解的问题</p><h2><span id="二-动量优化法">二、动量优化法</span></h2><p>动量优化方法是在梯度下降法的基础上进行的改变，具有加速梯度下降的作用</p><p>1、<strong>Momentum</strong>（动量）</p><p><code>train_step = tf.train.MomentumOptimizer(learning_rate=0.01, momentum=0.9).minimize(loss)</code></p><p>2、<strong>NAG</strong>（牛顿加速梯度）</p><p><code>train_step = tf.train.MomentumOptimizer(learning_rate=0.01, momentum=0.9, use_nesterov=True).minimize(loss)</code></p><h2><span id="三-自适应学习率优化算法">三、自适应学习率优化算法</span></h2><p>自适应学习率优化算法针对于机器学习模型的学习率</p><p>1、<strong>AdaGrad算法</strong></p><p><code>train_step = tf.train.AdagradOptimizer(0.01).minimize(loss)</code></p><p>2、<strong>RMSProp算法</strong></p><p>3、<strong>AdaDelta算法</strong></p><p>4、<strong>Adam算法</strong></p><h1><span id="optimizer-工作原理">optimizer 工作原理</span></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>    model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">##返回一个迭代器</span>    lr<span class="token operator">=</span>learning_rate，   <span class="token comment">##学习率</span>weight_decay<span class="token punctuation">)</span>     <span class="token comment">##学习率的衰减</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>张量</title>
      <link href="/2022/04/01/zhang-liang/"/>
      <url>/2022/04/01/zhang-liang/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%BC%A0%E9%87%8F">张量</a><ul><li><a href="#%E4%B8%80-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%A0%E9%87%8F">一、初始化张量</a></li><li><a href="#%E4%BA%8C-%E5%B1%9E%E6%80%A7">二、属性</a></li><li><a href="#%E4%B8%89-%E8%BF%90%E7%AE%97">三、运算</a></li><li><a href="#%E5%9B%9B-%E8%BD%AC%E5%8C%96">四、转化</a></li></ul></li></ul><!-- tocstop --><h1><span id="张量">张量</span></h1><p>​        张量是一种特殊的数据结构，与数组和矩阵非常相似。在 PyTorch 中，我们使用张量对模型的输入和输出以及模型的参数进行编码。</p><p>张量可以在 GPU 或其他硬件加速器上运行，张量和 NumPy 数组通常可以共享相同的底层内存，从而无需复制数据。</p><h2><span id="一-初始化张量">一、初始化张量</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#1、张量可以直接从数据中创建。</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>x_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">#2、张量可以从 NumPy 数组创建</span>np_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span>x_np <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np_array<span class="token punctuation">)</span><span class="token comment">#3、从另一个张量，新张量保留参数张量的属性（形状、数据类型），除非显式覆盖</span>x_ones <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span>x_rand <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand_like<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment">##随机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="二-属性">二、属性</span></h2><p>张量属性描述了它们的形状、数据类型和存储它们的设备</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Shape of tensor: </span><span class="token interpolation"><span class="token punctuation">{</span>tensor<span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Datatype of tensor: </span><span class="token interpolation"><span class="token punctuation">{</span>tensor<span class="token punctuation">.</span>dtype<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Device tensor is stored on: </span><span class="token interpolation"><span class="token punctuation">{</span>tensor<span class="token punctuation">.</span>device<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="三-运算">三、运算</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##默认情况下，张量是在 CPU 上创建的。我们需要使用.to方法明确地将张量移动到 GPU （在检查 GPU 可用性之后）</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tensor <span class="token operator">=</span> tensor<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span><span class="token comment">##索引和切片</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'First row: '</span><span class="token punctuation">,</span> tensor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'First column: '</span><span class="token punctuation">,</span> tensor<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Last column:'</span><span class="token punctuation">,</span> tensor<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token comment">##连接张量您可以用来torch.cat沿给定维度连接一系列张量。</span>t1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token comment">##将其转换为 Python 数值item()</span>agg <span class="token operator">=</span> tensor<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>agg_item <span class="token operator">=</span> agg<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>agg_item<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>agg_item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="四-转化">四、转化</span></h2><p><code>transforms.ToTensor()</code></p><p>transforms.ToTensor() 将尺⼨为 (H x W x C) 且数据位于[0, 255]的</p><p><strong>PIL 图⽚</strong>或者数据类型为 np.uint8 的 <strong>NumPy 数组</strong>转换为尺⼨为 (C x H x W) 且数据类型为 torch.float32 且位于[0.0, 1.0]的 Tensor 。</p><p><strong>由于像素值为 0 到 255 的整数，所以刚好是 uint8 所能表示的范围，包括transforms.ToTensor() 在内的⼀些关于图⽚的函数就默认输⼊的是uint8型</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xxx.jpg'</span><span class="token punctuation">)</span>    <span class="token comment">## w, h  ##h, w, c  ## h, w, c</span>img_tensor <span class="token operator">=</span> trans<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># c, h, w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pytorch简单了解</title>
      <link href="/2022/04/01/pytorch-jian-dan-liao-jie/"/>
      <url>/2022/04/01/pytorch-jian-dan-liao-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE">一、处理数据</a></li><li><a href="#%E4%BA%8C-%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9E%8B">二、创建模型</a></li><li><a href="#%E4%B8%89-%E4%BC%98%E5%8C%96%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0">三、优化模型参数</a></li></ul><!-- tocstop --><h1><span id="一-处理数据">一、处理数据</span></h1><p>1、PyTorch 有两个<a href="https://pytorch.org/docs/stable/data.html">处理数据的原语</a></p><p>​        Dataset存储样本及其对应的标签，并DataLoader在 周围包裹一个可迭代对象Dataset,以便轻松访问样本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##Dataset存储样本及其对应的标签，并DataLoader在Dataset</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader  <span class="token comment">##数据加载核心，可迭代的Python</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToTensor<span class="token punctuation">,</span> Lambda<span class="token punctuation">,</span>Compose<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据集类型：map , iterable (可迭代)</p><p>2、torchvision</p><p><code>torchvision.datasets</code>模块包含<code>Dataset</code>许多真实世界视觉数据的对象，其中每个dataset都包含两个参数，transform 和 target_transform </p><p>transform ：修改样本<br>target_transform ：修改标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##下载数据,CIFAR10 是 50000训练和10000测试</span>train_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>  root <span class="token operator">=</span> <span class="token string">"data"</span><span class="token punctuation">,</span>              <span class="token comment">##是存储训练/测试数据的路径</span>train <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token comment">##指定训练或测试数据集</span>download <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token comment">##如果数据不可用，则从 Internet 下载数据root</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">##指定特征和标签转换</span>test_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>  root <span class="token operator">=</span> <span class="token string">"data"</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>download <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> transfrToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">##加载数据</span>batch_size <span class="token operator">=</span> <span class="token number">64</span>train_dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>batch_size <span class="token operator">=</span> batch_size<span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span>batch_size <span class="token operator">=</span> batch_size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="二-创建模型">二、创建模型</span></h1><p>为了在 PyTorch 中定义神经网络，我们创建了一个继承自<a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html">nn.Module</a>的类</p><p>1、torch.nn.Module ：所有神经网络模块的基类</p><p><code>__init__</code> :函数中定义网络层，并在函数中指定数据将如何通过网络<code>forward</code>。</p><p>为了<strong>加速神经网络中的操作</strong>，我们将其移至 GPU。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> Fdevice <span class="token operator">=</span> <span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Using </span><span class="token interpolation"><span class="token punctuation">{</span>device<span class="token punctuation">}</span></span><span class="token string"> device"</span></span><span class="token punctuation">)</span>  <span class="token comment">##使用的设备</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="三-优化模型参数">三、优化模型参数</span></h1><p>1、为了训练一个模型，我们需要一个<a href="https://pytorch.org/docs/stable/nn.html#loss-functions">损失函数</a> 和一个<a href="https://pytorch.org/docs/stable/optim.html">优化器</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">##损失函数</span>optimiter <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token comment">##优化器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、在单个训练循环中，模型对训练数据集进行预测（分批输入），并反向传播预测误差以调整模型的参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">,</span>model<span class="token punctuation">,</span>criterion<span class="token punctuation">,</span>optimizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment"># Compute prediction error</span>        pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">##数据做预测 ，得到的是矩阵</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>y<span class="token punctuation">)</span>  <span class="token comment">##计算损失</span>        <span class="token comment"># Backpropagation</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">##清零</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            loss<span class="token punctuation">,</span>current <span class="token operator">=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>batch_idx<span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"loss: </span><span class="token interpolation"><span class="token punctuation">{</span>loss<span class="token punctuation">:</span><span class="token format-spec">&gt;7f</span><span class="token punctuation">}</span></span><span class="token string">  [</span><span class="token interpolation"><span class="token punctuation">{</span>current<span class="token punctuation">:</span><span class="token format-spec">&gt;5d</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>size<span class="token punctuation">:</span><span class="token format-spec">&gt;5d</span><span class="token punctuation">}</span></span><span class="token string">]"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、根据测试数据集检查模型的性能，以确保它正在学习</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">,</span>model<span class="token punctuation">,</span>criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    num_class <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sumloss <span class="token operator">=</span> <span class="token number">0.0</span>    correct <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            y <span class="token operator">=</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">##数据预测</span>            _<span class="token punctuation">,</span>pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span>dim <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">##返回最大值和下标</span>            sumloss <span class="token operator">+=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            correct <span class="token operator">+=</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    test_loss <span class="token operator">=</span> sumloss<span class="token operator">/</span>num_class  <span class="token comment">##损失总值</span>    correct <span class="token operator">/=</span> size  <span class="token comment">##正确率</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、训练过程在多次迭代（<em>epochs</em>）中进行。</p><p>​        在每个时期，模型都会学习参数以做出更好的预测。我们在每个时期打印模型的准确性和损失；我们希望看到每个 epoch 的准确率增加和损失减少</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">,</span>model<span class="token punctuation">,</span>criterion<span class="token punctuation">,</span>optimiter<span class="token punctuation">)</span>    test<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">,</span>model<span class="token punctuation">,</span>criterion<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、保存模型</p><p>保存模型的常用方法是序列化内部状态字典（包含模型参数）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"model.pth"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、加载模型</p><p>加载模型的过程包括重新创建模型结构并将状态字典加载到其中、</p><pre class="line-numbers language-none"><code class="language-none">model = Model()model.load_state_dict(torch.load("model.pth"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##j</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"airplane"</span><span class="token punctuation">,</span>    <span class="token string">"automobile"</span><span class="token punctuation">,</span>    <span class="token string">"bird"</span><span class="token punctuation">,</span>    <span class="token string">"cat"</span><span class="token punctuation">,</span>    <span class="token string">"deer"</span><span class="token punctuation">,</span>    <span class="token string">"dog"</span><span class="token punctuation">,</span>    <span class="token string">"frog"</span><span class="token punctuation">,</span>    <span class="token string">"horse"</span><span class="token punctuation">,</span>    <span class="token string">"ship"</span><span class="token punctuation">,</span>    <span class="token string">"truck"</span><span class="token punctuation">]</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>test_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    predicted<span class="token punctuation">,</span>actual <span class="token operator">=</span> classes<span class="token punctuation">[</span>pred<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">class</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模型构造</title>
      <link href="/2022/04/01/mo-xing-gou-zao/"/>
      <url>/2022/04/01/mo-xing-gou-zao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性回归</title>
      <link href="/2022/04/01/xian-xing-hui-gui/"/>
      <url>/2022/04/01/xian-xing-hui-gui/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92">一、线性回归</a><ul><li><a href="#1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0">1、线性回归的从零开始实现</a></li><li><a href="#2-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0">2、线性回归的简洁实现</a></li></ul></li><li><a href="#%E8%B0%83%E6%95%B4%E5%AD%A6%E4%B9%A0%E7%8E%87">调整学习率</a></li><li><a href="#%E4%BA%8C-softmax%E5%9B%9E%E5%BD%92">二、softmax回归</a><ul><li><a href="#1-softmax%E5%9B%9E%E5%BD%92">1、softmax回归</a></li><li><a href="#2-softmax%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0">2、softmax回归的从零开始实现</a></li><li><a href="#3-softmax%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0">3、softmax回归的简洁实现</a></li></ul></li><li><a href="#%E4%B8%89-%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA">三、多层感知机</a><ul><li><a href="#1-%E9%9A%90%E8%97%8F%E5%B1%82">1、隐藏层</a></li><li><a href="#2-%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0">2、激活函数</a></li><li><a href="#3-%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0">3、多层感知机的从零开始实现</a></li><li><a href="#4-%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%9A%84%E7%AE%80%E4%BB%8B%E5%AE%9E%E7%8E%B0">4、多层感知机的简介实现</a></li></ul></li><li><a href="#%E5%9B%9B-%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9-%E6%AC%A0%E6%8B%9F%E5%90%88%E5%92%8C%E8%BF%87%E6%8B%9F%E5%90%88">四、模型选择、欠拟合和过拟合</a><ul><li><a href="#1-%E8%AE%AD%E7%BB%83%E8%AF%AF%E5%B7%AE%E5%92%8C%E6%B3%9B%E5%8C%96%E8%AF%AF%E5%B7%AE">1、训练误差和泛化误差</a></li><li><a href="#2-%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9">2、模型选择</a></li><li><a href="#3-%E6%AC%A0%E6%8B%9F%E5%90%88%E5%92%8C%E8%BF%87%E6%8B%9F%E5%90%88">3、欠拟合和过拟合</a></li><li><a href="#4-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%87%BD%E6%95%B0%E6%8B%9F%E5%90%88%E5%AE%9E%E9%AA%8C">4、多项式函数拟合实验</a></li></ul></li><li><a href="#%E4%BA%94-%E6%9D%83%E9%87%8D%E8%A1%B0%E5%87%8F%E8%BF%87%E6%8B%9F%E5%90%88">五、权重衰减(过拟合)</a><ul><li><a href="#1-%E6%96%B9%E6%B3%95l2%E8%8C%83%E6%95%B0%E6%AD%A3%E5%88%99%E5%8C%96">1、方法（L2范数正则化）</a></li><li><a href="#2-%E9%AB%98%E7%BB%B4%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C">2、高维线性回归实验</a></li></ul></li><li><a href="#%E5%85%AD-%E4%B8%A2%E5%BC%83%E6%B3%95%E8%BF%87%E6%8B%9F%E5%90%88">六、丢弃法（过拟合）</a><ul><li><a href="#1-%E5%AE%9E%E7%8E%B0">1、实现</a></li><li><a href="#2-%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0">2、简洁实现</a></li></ul></li><li><a href="#%E4%B8%83-%E6%AD%A3%E5%90%91%E4%BC%A0%E6%92%AD-%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E5%92%8C%E8%AE%A1%E7%AE%97%E5%9B%BE">七、正向传播、反向传播和计算图</a></li><li><a href="#%E5%85%AB-%E6%95%B0%E5%80%BC%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%92%8C%E6%A8%A1%E5%9E%8B%E5%88%9D%E5%A7%8B%E5%8C%96">八、数值稳定性和模型初始化</a></li><li><a href="#%E4%B9%9D-%E5%AE%9E%E6%88%98kaggle%E6%AF%94%E8%B5%9B%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B">九、实战Kaggle比赛：房价预测</a></li></ul><!-- tocstop --><h1><span id="一-线性回归">一、线性回归</span></h1><h3><span id="1-线性回归的从零开始实现">1、线性回归的从零开始实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token keyword">from</span> IPython <span class="token keyword">import</span> display<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token comment">## 1、生成数据集</span><span class="token comment"># y = Xw + b + 噪声</span><span class="token keyword">def</span> <span class="token function">synthetic_data</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>b<span class="token punctuation">,</span>num_examples<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>num_examples<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 均值为0，方差为1 ，随机</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>X<span class="token punctuation">,</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> b    y <span class="token operator">+=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">return</span> X<span class="token punctuation">,</span>y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>true_w <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>true_b <span class="token operator">=</span> <span class="token number">4.2</span>features<span class="token punctuation">,</span>labels <span class="token operator">=</span> synthetic_data<span class="token punctuation">(</span>true_w<span class="token punctuation">,</span>true_b<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">## 2、读取数据</span><span class="token comment"># 它每次返回 batch_size （批量⼤⼩）个随机样本的特征和标签。</span><span class="token keyword">def</span> <span class="token function">data_iter</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>features<span class="token punctuation">,</span>labels<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_examples <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>features<span class="token punctuation">)</span>  <span class="token comment">#</span>    indices <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>num_examples<span class="token punctuation">)</span><span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num_examples<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>indices<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token builtin">min</span><span class="token punctuation">(</span>i<span class="token operator">+</span>batch_size<span class="token punctuation">,</span>num_examples<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> features<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>labels<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>  <span class="token comment"># 产生小批量的数据</span>batch_size <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># for X,y in data_iter(batch_size , features , labels):</span><span class="token comment">#     print(X,y)</span><span class="token comment">## 3、初始化模型参数</span>w <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 需要计算梯度</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">## 4、定义模型</span><span class="token keyword">def</span> <span class="token function">linreg</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>X<span class="token punctuation">,</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token comment">## 5、定义损失函数</span><span class="token keyword">def</span> <span class="token function">squared_loss</span><span class="token punctuation">(</span>y_hat<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 平方损失</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span>y_hat<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token comment"># 返回向量</span><span class="token comment">## 6、定义优化算法</span><span class="token keyword">def</span> <span class="token function">sgd</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span>lr<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 参数（w,b），学习率，批量大小</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 更新的时候不要参与梯度计算</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>            param<span class="token punctuation">.</span>data <span class="token operator">-=</span> lr <span class="token operator">*</span> param<span class="token punctuation">.</span>grad <span class="token operator">/</span> batch_size <span class="token comment"># 求了均值</span>            param<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 梯度设0</span><span class="token comment">## 7、训练模型</span>lr <span class="token operator">=</span> <span class="token number">1e-3</span>net <span class="token operator">=</span> linregloss <span class="token operator">=</span> squared_loss<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> X<span class="token punctuation">,</span>y <span class="token keyword">in</span> data_iter<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>features<span class="token punctuation">,</span>labels<span class="token punctuation">)</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># l是有关⼩批量X和y的损失</span>        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># ⼩批量的损失对模型参数求梯度</span>        sgd<span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>lr<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span> <span class="token comment"># 使⽤⼩批量随机梯度下降迭代模型参数</span>        <span class="token comment"># 梯度清零在优化函数中</span>        <span class="token comment"># 不需要计算梯度的，把整个features放进去，评价一下，计算损失</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_l <span class="token operator">=</span> loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>features<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>labels<span class="token punctuation">)</span> <span class="token comment"># 小批量的损失</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch %d, loss %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> train_l<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-线性回归的简洁实现">2、线性回归的简洁实现</span></h3><p>​        nn 的核⼼数据结构是 ==Module== ，它是⼀个抽象概念，既可以表示神经⽹络中的某个层（layer），也可以表示⼀个包含很多层的神经⽹络。在实际使⽤中，最常⻅的做法是继承 nn.Module ，撰写⾃⼰的⽹络/层。⼀个 nn.Module 实例应该包含⼀些层以及返回输出的前向传播（forward）⽅法。</p><blockquote><p>​        torch.utils.data 模块提供了有关数据处理的⼯具</p><p>​        torch.nn 模块定义了⼤量神经⽹络的层</p><p>​        torch.nn.init 模块定义了各种初始化⽅法</p><p>​        torch.optim 模块提供了模型参数初始化的各种⽅法。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnform torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Data<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optimnum_inputs <span class="token operator">=</span> <span class="token number">2</span>num_examples <span class="token operator">=</span> <span class="token number">1000</span>true_w <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>true_b <span class="token operator">=</span> <span class="token number">4.2</span>batch_size <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">## 1、生成数据集</span><span class="token comment"># y = Xw + b + 噪声</span><span class="token keyword">def</span> <span class="token function">synthetic_data</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>b<span class="token punctuation">,</span>num_examples<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>num_examples<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 均值为0，方差为1 ，随机</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>X<span class="token punctuation">,</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> b    y <span class="token operator">+=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">return</span> X<span class="token punctuation">,</span>y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">,</span>labels <span class="token operator">=</span> synthetic_data<span class="token punctuation">(</span>true_w<span class="token punctuation">,</span>true_b<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">## 2、读取数据</span><span class="token comment"># PyTorch提供了 data 包来读取数据</span><span class="token comment"># 将训练数据的特征和标签组合</span>dataset <span class="token operator">=</span> data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>features<span class="token punctuation">,</span>labels<span class="token punctuation">)</span><span class="token comment"># 随机读取⼩批量</span>data_iter <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">## 3、定义模型</span><span class="token triple-quoted-string string">'''搭建网络的有序容器net = nn.Sequential(    nn.Linear(num_inputs, 1)    # 此处还可以传⼊其他层)'''</span><span class="token keyword">class</span> <span class="token class-name">LinearNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n_feature<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>LinearNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_feature<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> ynet <span class="token operator">=</span> LinearNet<span class="token punctuation">(</span>num_inputs<span class="token punctuation">)</span><span class="token comment"># # 初始化模型参数  # init.normal_ 将权重参数每个元素初始化为随机采样于均值为0、标准差为0.01的正态分布。</span><span class="token comment"># net[0].weight.data.normal_(0,0.01)</span><span class="token comment"># net[0].bias.data.fill_(0)</span><span class="token comment"># 4、损失函数和优化器</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 均方误差</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr <span class="token operator">=</span> <span class="token number">1e-3</span><span class="token punctuation">)</span>  <span class="token comment">## 传入参数和学习率</span><span class="token triple-quoted-string string">'''# 调整学习率for param_group in optimizer.param_groups: param_group['lr'] *= 0.1 # 学习率为之前的0.1倍'''</span><span class="token comment"># 5、训练模型</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> X<span class="token punctuation">,</span>y <span class="token keyword">in</span> data_iter<span class="token punctuation">:</span>        output <span class="token operator">=</span> net<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token comment"># l是有关⼩批量X和y的损失</span>        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span>y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 梯度清零</span>        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#求了平均</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch %d, loss: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> l<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="二-softmax回归">二、softmax回归</span></h1><h3><span id="1-softmax回归">1、softmax回归</span></h3><blockquote><p>softmax回归适⽤于分类问题。它使⽤softmax运算输出类别的概率分布。</p><p>softmax回归是⼀个单层神经⽹络，输出个数等于分类问题中的类别个数。</p></blockquote><p><img src="/2022/04/01/xian-xing-hui-gui/AAF60B9F0B2E036CD4773D5513E12FD6.jpg" alt="img"></p><p>输出：==最⼤的输出==所对应的类作为预测输出</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220214144715122.png" alt="image-20220214144715122"></p><h3><span id="2-softmax回归的从零开始实现">2、softmax回归的从零开始实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">import</span> d2lmnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'~/Datasets/FashionMNIST'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'~/Datasets/FashionMNIST'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">64</span>train_iter<span class="token punctuation">,</span>test_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span>mnist_test<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span>  <span class="token comment"># 返回 train_iter 和 test_iter 两个变量</span><span class="token comment"># 初始化模型参数</span>num_inputs <span class="token operator">=</span> <span class="token number">784</span>num_outputs <span class="token operator">=</span> <span class="token number">10</span>W <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span>num_outputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_outputs<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 实现softmax运算</span><span class="token comment">## 矩阵 X 的⾏数是样本数，列数是输出个数</span><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 我们将每个元素变成了⾮负数，且每⼀⾏和为1。矩阵每⾏都是合法的概率分布</span>    <span class="token comment"># softmax运算的输出矩阵中的任意⼀⾏元素代表了⼀个样本在各个输出类别上的预测概率。</span>    X_exp <span class="token operator">=</span> X<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span>    partition <span class="token operator">=</span> X_exp<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> X_exp<span class="token operator">/</span>partitionX <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X_prob <span class="token operator">=</span> softmax<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment"># 定义模型</span><span class="token keyword">def</span> <span class="token function">net</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> softmax<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>X<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>num_inputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>W<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token comment">##两矩阵相乘</span><span class="token comment">##为了得到标签的预测概率，我们可以使⽤ gather 函数</span><span class="token keyword">def</span> <span class="token function">cross_entropy</span><span class="token punctuation">(</span>y_hat<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">##交叉损失函数</span>    <span class="token keyword">return</span> <span class="token operator">-</span> torch<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y_hat<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练模型</span>num_epochs<span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.1</span>d2l<span class="token punctuation">.</span>train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> cross_entropy<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> <span class="token punctuation">[</span>W<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token punctuation">)</span><span class="token comment"># 预测</span>X<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>test_iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>true_labels <span class="token operator">=</span> d2l<span class="token punctuation">.</span>get_fashion_mnist_labels<span class="token punctuation">(</span>y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pred_labels <span class="token operator">=</span> d2l<span class="token punctuation">.</span>get_fashion_mnist_labels<span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>titles <span class="token operator">=</span> <span class="token punctuation">[</span>true <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> pred <span class="token keyword">for</span> true<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>true_labels<span class="token punctuation">,</span>pred_labels<span class="token punctuation">)</span><span class="token punctuation">]</span>d2l<span class="token punctuation">.</span>show_fashion_mnist<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> titles<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">###### d2l.py #####</span><span class="token comment"># 计算准确率</span><span class="token keyword">def</span> <span class="token function">evaluate_accuracy</span><span class="token punctuation">(</span>data_iter<span class="token punctuation">,</span> net<span class="token punctuation">)</span><span class="token punctuation">:</span>    acc_sum<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> data_iter<span class="token punctuation">:</span>        acc_sum <span class="token operator">+=</span> <span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">+=</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> acc_sum <span class="token operator">/</span> n<span class="token comment"># 优化算法</span><span class="token keyword">def</span> <span class="token function">sgd</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span>lr<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 参数（w,b），学习率，批量大小</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 更新的时候不要参与梯度计算</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>            param<span class="token punctuation">.</span>data <span class="token operator">-=</span> lr <span class="token operator">*</span> param<span class="token punctuation">.</span>grad <span class="token operator">/</span> batch_size <span class="token comment"># 求了均值</span>            param<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 梯度设0</span><span class="token comment"># 训练函数</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span>train_iter<span class="token punctuation">,</span>test_iter<span class="token punctuation">,</span>loss<span class="token punctuation">,</span>num_epochs<span class="token punctuation">,</span>batch_size<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>optimizer<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        train_loss<span class="token punctuation">,</span>train_acc<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> X<span class="token punctuation">,</span>y <span class="token keyword">in</span> train_iter<span class="token punctuation">:</span>            y_hat <span class="token operator">=</span> net<span class="token punctuation">(</span>X<span class="token punctuation">)</span>            l <span class="token operator">=</span> loss<span class="token punctuation">(</span>y_hat<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 梯度清零</span>            <span class="token keyword">if</span> optimizer <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> params <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grad <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>                    param<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>            l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> optimizer <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                sgd<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_loss <span class="token operator">+=</span> l<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_acc <span class="token operator">+=</span> <span class="token punctuation">(</span>y_hat<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            n <span class="token operator">+=</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        test_acc <span class="token operator">=</span> evaluate_accuracy<span class="token punctuation">(</span>test_iter<span class="token punctuation">,</span> net<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch %d, loss %.4f, train acc %.3f, test acc %.3f'</span> <span class="token operator">%</span>              <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> train_loss <span class="token operator">/</span> n<span class="token punctuation">,</span> train_acc <span class="token operator">/</span> n<span class="token punctuation">,</span>test_acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-softmax回归的简洁实现">3、softmax回归的简洁实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">import</span> d2lmnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'~/Datasets/FashionMNIST'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'~/Datasets/FashionMNIST'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">64</span>train_iter<span class="token punctuation">,</span>test_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span>mnist_test<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span>  <span class="token comment"># 返回 train_iter 和 test_iter 两个变量</span><span class="token comment"># 初始化模型参数</span>num_inputs <span class="token operator">=</span> <span class="token number">784</span>num_outputs <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 实现softmax运算</span><span class="token keyword">class</span> <span class="token class-name">LinearNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num_inputs<span class="token punctuation">,</span>num_outputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>LinearNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span>num_outputs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ynet <span class="token operator">=</span> LinearNet<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span>num_outputs<span class="token punctuation">)</span><span class="token comment"># 我们使⽤均值为0、标准差为0.01的正态分布随机初始化模型的权᯿参数。</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>net<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>net<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># 训练模型</span>num_epochs <span class="token operator">=</span> <span class="token number">5</span>d2l<span class="token punctuation">.</span>train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span><span class="token comment"># 预测</span>X<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>test_iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>true_labels <span class="token operator">=</span> d2l<span class="token punctuation">.</span>get_fashion_mnist_labels<span class="token punctuation">(</span>y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pred_labels <span class="token operator">=</span> d2l<span class="token punctuation">.</span>get_fashion_mnist_labels<span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>titles <span class="token operator">=</span> <span class="token punctuation">[</span>true <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> pred <span class="token keyword">for</span> true<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>true_labels<span class="token punctuation">,</span>pred_labels<span class="token punctuation">)</span><span class="token punctuation">]</span>d2l<span class="token punctuation">.</span>show_fashion_mnist<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> titles<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="三-多层感知机">三、多层感知机</span></h1><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220302205634394.png" alt="image-20220302205634394"></p><h3><span id="1-隐藏层">1、隐藏层</span></h3><p>多层感知机在单层神经⽹络的基础上引⼊了⼀到多个隐藏层（hidden layer）。隐藏层位于输⼊层和输出层之间。隐藏层和输出层都是全连接层。</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220215202316918.png" alt="image-20220215202316918"> <img src="/2022/04/01/xian-xing-hui-gui/image-20220215202251053.png" alt="image-20220215202251053"></p><h3><span id="2-激活函数">2、激活函数</span></h3><p>引⼊非线性变换，例如对隐藏变量使⽤按元素运算的非线性函数进⾏变换，然后再作为下⼀个全连接层的输⼊。</p><p>1、ReLU函数 : 只保留正数元素，并将负数元素清零</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220215202940748.png" alt="image-20220215202940748"></p><p>2、sigmoid函数 ：可以将元素的值变换到0和1之间</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220215202956228.png" alt="image-20220215202956228"></p><p>3、tanh函数 ：可以将元素的值变换到-1和1之间</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220215203130967.png" alt="image-20220215203130967"></p><h3><span id="3-多层感知机的从零开始实现">3、多层感知机的从零开始实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  <span class="token comment">##可扩展的Python进度条，可以在 Python 长循环中添加一个进度提示信息</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> d2lmnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">128</span>train_iter<span class="token punctuation">,</span>test_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span>mnist_test<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span>  <span class="token comment"># 返回 train_iter 和 test_iter 两个变量</span><span class="token comment"># 输⼊个数为78,，输出个数为10, 设超参数隐藏单元个数为256</span>num_inputs<span class="token punctuation">,</span> num_outputs<span class="token punctuation">,</span> num_hiddens <span class="token operator">=</span> <span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span>w1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>w2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> num_outputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_outputs<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>params <span class="token operator">=</span> <span class="token punctuation">[</span>w1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> b2<span class="token punctuation">]</span><span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 激活函数</span><span class="token keyword">def</span> <span class="token function">relu</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token operator">=</span>X<span class="token punctuation">,</span> other<span class="token operator">=</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">net</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> X<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_inputs<span class="token punctuation">)</span><span class="token punctuation">)</span>    H <span class="token operator">=</span> relu<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>X<span class="token punctuation">,</span>w1<span class="token punctuation">)</span><span class="token operator">+</span>b1<span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>H<span class="token punctuation">,</span>w2<span class="token punctuation">)</span><span class="token operator">+</span>b2loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>num_epochs<span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100.0</span>  <span class="token comment">## 学习率这么大：PyTorch默认的是求平均，所以⽤PyTorch计算得到的loss⽐mxnet⼩很多（⼤概是maxnet计算得到的1/batch_size这个量级），所以反向传播得到的梯度也⼩很多</span><span class="token comment">## 之所以这么⼤，应该是因为d2l⾥⾯的sgd函数在更新的时候除以了batch_size，其实PyTorch在计算loss的时候已经除过⼀次了，sgd这⾥应该不⽤除了</span>d2l<span class="token punctuation">.</span>train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> params<span class="token punctuation">,</span>lr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-多层感知机的简介实现">4、多层感知机的简介实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  <span class="token comment">##可扩展的Python进度条，可以在 Python 长循环中添加一个进度提示信息</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> d2lmnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">128</span>train_iter<span class="token punctuation">,</span>test_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span>mnist_test<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span>  <span class="token comment"># 返回 train_iter 和 test_iter 两个变量</span><span class="token comment"># 输⼊个数为78,，输出个数为10, 设超参数隐藏单元个数为256</span>num_inputs<span class="token punctuation">,</span> num_outputs<span class="token punctuation">,</span> num_hiddens <span class="token operator">=</span> <span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token keyword">class</span> <span class="token class-name">LinearNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num_intputs<span class="token punctuation">,</span> num_outputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>LinearNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_intputs<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> num_outputs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ynet <span class="token operator">=</span> LinearNet<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span>num_outputs<span class="token punctuation">)</span><span class="token keyword">for</span> params <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>params<span class="token punctuation">,</span>mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>num_epochs<span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.5</span>d2l<span class="token punctuation">.</span>train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span>optimizer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220305132724165.png" alt="image-20220305132724165"></p><h1><span id="四-模型选择-欠拟合和过拟合">四、模型选择、欠拟合和过拟合</span></h1><h3><span id="1-训练误差和泛化误差">1、训练误差和泛化误差</span></h3><p>训练误差：模型在训练数据集上表现出的误差</p><p>泛化误差：模型在任意⼀个测试数据样本上表现出的误差的期望，并常常通过测试数据集上的误差来近似</p><p><strong>机器学习模型应关注降低泛化误差</strong></p><h3><span id="2-模型选择">2、模型选择</span></h3><p>1、验证数据集：</p><p>2、K折交叉验证：把原始训练数据集分割成K个不重合的子数据集，然后我们做K次模型训练和验证。每⼀次，我们使⽤⼀个⼦数据集验证模型，并使⽤其他K-1个⼦数据集来训练模型。</p><h3><span id="3-欠拟合和过拟合">3、欠拟合和过拟合</span></h3><p>欠拟合：是模型⽆法得到较低的训练误差，我们将这⼀现象称作⽋拟合</p><p>过拟合：模型的训练误差远⼩于它在测试数据集上的误差，我们称该现象为过拟合</p><p>1、模型复杂度：</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220216201329078.png" alt="image-20220216201329078"></p><p>2.训练数据大小：</p><p>如果训练数据集中样本数过少，特别是⽐模型参数数量（按元素计）更少时，过拟合更容易发⽣。</p><h3><span id="4-多项式函数拟合实验">4、多项式函数拟合实验</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">import</span> d2l<span class="token comment"># 1、生成数据集</span>max_degree <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment"># 特征为20</span>n_train<span class="token punctuation">,</span> n_test <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span>  <span class="token comment"># 训练集和测试集</span>true_w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>max_degree<span class="token punctuation">)</span>true_w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 20个特征，只有前四个是有值的，其余全为噪音</span>ture_b <span class="token operator">=</span> <span class="token number">5</span>features <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span>n_train<span class="token operator">+</span>n_test<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>features<span class="token punctuation">)</span>poly_features <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>features<span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>max_degree<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_degree<span class="token punctuation">)</span><span class="token punctuation">:</span>    poly_features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">/=</span> math<span class="token punctuation">.</span>gamma<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>poly_features<span class="token punctuation">,</span>true_w<span class="token punctuation">)</span>labels <span class="token operator">+=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>scale<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> size<span class="token operator">=</span>labels<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>true_w<span class="token punctuation">,</span>features<span class="token punctuation">,</span>poly_features<span class="token punctuation">,</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span>    torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>x<span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span>true_w<span class="token punctuation">,</span>features<span class="token punctuation">,</span>poly_features<span class="token punctuation">,</span>labels<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># print(features[:2], poly_features[:2], labels[:2])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="五-权重衰减过拟合">五、权重衰减(过拟合)</span></h1><h3><span id="1-方法l2范数正则化">1、方法（L2范数正则化）</span></h3><p>​                           L2范数                                                                       L1范数  </p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220302203844501.png" alt="image-20220302203844501"><img src="/2022/04/01/xian-xing-hui-gui/image-20220302204008100.png" alt="image-20220302204008100"></p><p>L2范数正则化在模型==原损失函数==基础上添加 L2范数==惩罚项==，从⽽得到训练所需要最⼩化的函数。</p><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220216203059101.png" alt="image-20220216203059101"></p><h3><span id="2-高维线性回归实验">2、高维线性回归实验</span></h3><h1><span id="六-丢弃法过拟合">六、丢弃法（过拟合）</span></h1><p>丢弃法：在层之间加入噪音 (只在训练模型时使⽤，当作正则项)</p><p>设丢弃概率为p，那么有p的概率hi会被==清零==，有1-p的概率hi会除以1-p做拉伸。丢弃概率是丢弃法的超参数。</p><h3><span id="1-实现">1、实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  <span class="token comment">##可扩展的Python进度条，可以在 Python 长循环中添加一个进度提示信息</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> d2lmnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">256</span>train_iter<span class="token punctuation">,</span>test_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span>mnist_test<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span>  <span class="token comment"># 返回 train_iter 和 test_iter 两个变量</span><span class="token comment"># 输⼊个数为78,，输出个数为10, 设超参数隐藏单元个数为256(两个隐藏层)</span>num_inputs<span class="token punctuation">,</span> num_outputs<span class="token punctuation">,</span> num_hiddens1<span class="token punctuation">,</span> num_hiddens2 <span class="token operator">=</span> <span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span>w1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_hiddens1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_hiddens1<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>w2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_hiddens1<span class="token punctuation">,</span> num_hiddens2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_hiddens2<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>w3 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_hiddens2<span class="token punctuation">,</span> num_outputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>b3 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_outputs<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>params <span class="token operator">=</span> <span class="token punctuation">[</span>w1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span>w3<span class="token punctuation">,</span>b3<span class="token punctuation">]</span><span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#将全连接层和激活函数ReLU串起来，并对每个激活函数的输出使⽤丢弃法</span><span class="token comment"># 丢弃函数</span><span class="token keyword">def</span> <span class="token function">dropout</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> drop_prob<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> X<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> drop_prob <span class="token operator">&lt;=</span> <span class="token number">1</span>    keep_prob <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> drop_prob    <span class="token comment"># 这种情况下把全部元素都丢弃</span>    <span class="token keyword">if</span> keep_prob <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">&lt;</span> keep_prob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> mask <span class="token operator">*</span> X <span class="token operator">/</span> keep_prob<span class="token comment"># 激活函数</span>drop_prob1<span class="token punctuation">,</span>drop_prob2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token keyword">def</span> <span class="token function">relu</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token operator">=</span>X<span class="token punctuation">,</span> other<span class="token operator">=</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">net</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>is_training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> X<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_inputs<span class="token punctuation">)</span><span class="token punctuation">)</span>    H1 <span class="token operator">=</span> relu<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>X<span class="token punctuation">,</span>w1<span class="token punctuation">)</span><span class="token operator">+</span>b1<span class="token punctuation">)</span>    <span class="token keyword">if</span> is_training<span class="token punctuation">:</span>        H1 <span class="token operator">=</span> dropout<span class="token punctuation">(</span>H1<span class="token punctuation">,</span>drop_prob1<span class="token punctuation">)</span> <span class="token comment">#第一层的丢弃</span>    H2 <span class="token operator">=</span> relu<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>H1<span class="token punctuation">,</span>w2<span class="token punctuation">)</span><span class="token operator">+</span>b2<span class="token punctuation">)</span>    <span class="token keyword">if</span> is_training<span class="token punctuation">:</span>        H2 <span class="token operator">=</span> dropout<span class="token punctuation">(</span>H2<span class="token punctuation">,</span>drop_prob2<span class="token punctuation">)</span> <span class="token comment">#第二层的丢弃</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>H2<span class="token punctuation">,</span>w3<span class="token punctuation">)</span><span class="token operator">+</span>b3loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>num_epochs<span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100.0</span>d2l<span class="token punctuation">.</span>train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> params<span class="token punctuation">,</span>lr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-简洁实现">2、简洁实现</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  <span class="token comment">##可扩展的Python进度条，可以在 Python 长循环中添加一个进度提示信息</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> d2lmnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>                                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">128</span>train_iter<span class="token punctuation">,</span>test_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span>mnist_test<span class="token punctuation">,</span>batch_size<span class="token punctuation">)</span>  <span class="token comment"># 返回 train_iter 和 test_iter 两个变量</span><span class="token comment"># 输⼊个数为78,，输出个数为10, 设超参数隐藏单元个数为256(两个隐藏层)</span>num_inputs<span class="token punctuation">,</span> num_outputs<span class="token punctuation">,</span> num_hiddens1<span class="token punctuation">,</span> num_hiddens2 <span class="token operator">=</span> <span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span>drop_prob1<span class="token punctuation">,</span>drop_prob2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token keyword">class</span> <span class="token class-name">LinearNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num_intputs<span class="token punctuation">,</span> num_outputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>LinearNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_intputs<span class="token punctuation">,</span> num_hiddens1<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>drop_prob1<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens1<span class="token punctuation">,</span>num_hiddens2<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>drop_prob2<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens2<span class="token punctuation">,</span> num_outputs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ynet <span class="token operator">=</span> LinearNet<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span>num_outputs<span class="token punctuation">)</span><span class="token keyword">for</span> params <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>params<span class="token punctuation">,</span>mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>num_epochs<span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.5</span>d2l<span class="token punctuation">.</span>train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span>optimizer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/01/xian-xing-hui-gui/image-20220305132615557.png" alt="image-20220305132615557"></p><h1><span id="七-正向传播-反向传播和计算图">七、正向传播、反向传播和计算图</span></h1><p><img src="/2022/04/01/xian-xing-hui-gui/82C84832C5D58C8BB1BB478C2EF0C1C2.jpg" alt="img"></p><p><strong>反向累积：</strong></p><ol><li>构造计算图</li><li>前向：执行图，存储中间结果</li><li>反向：从相反方向执行图（去除不需要的枝）</li></ol><p><img src="/2022/04/01/xian-xing-hui-gui/7E030EBDA7519CEAD89CDF91C444EFBE.jpg" alt="img"></p><h1><span id="八-数值稳定性和模型初始化">八、数值稳定性和模型初始化</span></h1><h1><span id="九-实战kaggle比赛房价预测">九、实战Kaggle比赛：房价预测</span></h1>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础知识</title>
      <link href="/2022/03/30/ji-chu-zhi-shi/"/>
      <url>/2022/03/30/ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C">一、数据操作</a></li><li><a href="#%E4%BA%8C-%E8%87%AA%E5%8A%A8%E6%B1%82%E6%A2%AF%E5%BA%A6">二、自动求梯度</a></li></ul><!-- tocstop --><h3><span id="一-数据操作">一、数据操作</span></h3><p>1、创建tensor</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 创建⼀个5x3的未初始化</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment"># 创建⼀个5x3的随机初始化</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span>    <span class="token comment"># long型全0</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span>new_ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>  <span class="token comment"># 返回的tensor默认具有相同的</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn_like<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># 指定新的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 返回⼀个真正新的副本（即不共享内存）</span>x_cp <span class="token operator">=</span> x<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment"># item() , 它可以将⼀个标量 Tensor 转换成⼀个Python number</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、广播机制</p><p>​        当对两个<strong>形状不同</strong>的 Tensor 按元素运算时，可能会触发⼴播（broadcasting）机制：先适当复制元素使这两个 Tensor 形状相同后再按元素运算。</p><p>4、运算的内存开销</p><p>5、TENSOR 和NUMPY相互转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使⽤ numpy() 、from_numpy() 将 Tensor 转换成NumPy数组(共享相同的内存)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 直接⽤ torch.tensor() 将NumPy数组转换成 Tensor ，进⾏数据拷⻉(不再共享内存)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、TENSOR ON GPU</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>  <span class="token comment"># GPU</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span> <span class="token comment"># 直接创建⼀个在GPU上的Tensor</span>    x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment"># 等价于 .to("cuda")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="二-自动求梯度">二、自动求梯度</span></h3><p>PyTorch提供的autograd 包能够根据输⼊和前向传播过程⾃动构建计算图，并执⾏反向传播。</p><p>若该 Tensor 是不是通过某些运算得到的，则 grad_fn 返回⼀个与这些运算相关的对象，否则是None。</p><p>1、开始追踪：<code>x = torch.ones(2, 2, requires_grad=True)</code>（这样就可以访问梯度，利⽤<strong>链式法则</strong>进⾏梯度传播了）。</p><p>2、结束追踪：<code>.detach()</code></p><p>3、梯度：</p><p>​        grad在反向传播过程中是累加的(accumulated)，这意味着每⼀次运⾏反向传播，梯度都会累加之前的梯度，所以⼀般在反向传播之前需把梯度清零。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>y <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># y是关于x的一个式子</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># y是标量，自动计算y关于x每个分量的梯度</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>  <span class="token comment"># 访问导数</span><span class="token comment"># 计算另一个函数</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清零</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、梯度下降：</p><ol><li><p>选择一个初始值w0</p></li><li><p>重复 ：</p></li></ol><p>5、小批量随机梯度下降：</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
